{"version":3,"sources":["logo.png","styles.ts","InputBar.tsx","Intro.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","InputBarStyled","styled","div","attrs","className","autofocus","InputText","input","IntroStyled","Logo","disabled","a","Fade","require","InputBar","props","top","opposite","cascade","collapse","when","showText","type","placeholder","value","text","onChange","onKeyPress","Intro","strings","typeSpeed","fadeOut","fadeOutDelay","onComplete","App","useState","inputText","setInputText","setShowText","showInput","setShowInput","showMoreStars3","setShowMoreStars3","showMoreStars6","setShowMoreStars6","count","setCount","e","key","setTimeout","href","target","src","logo","alt","height","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,kC,6zCCE3C,IAAMC,EAAiBC,IAAOC,IAAIC,MAAM,CACtCC,UAAW,WACXC,WAAW,GAFUJ,CAAH,KAedK,EAAYL,IAAOM,MAAMJ,MAAM,CACnCC,UAAW,YACXC,WAAW,GAFKJ,CAAH,KAwBTO,EAAcP,YAAOD,EAAPC,CAAH,KAiBJQ,GAPWR,YAAOK,GAAWH,MAAM,CAC9CC,UAAW,WACXM,UAAU,GAFYT,CAAH,KAODA,IAAOU,EAAV,MCxDXC,EAAOC,EAAQ,IAgCJC,EApB4B,SAACC,GAG1C,OACE,kBAACf,EAAD,KACA,kBAACY,EAAD,CAAMI,KAAG,EAACC,UAAQ,EAACC,SAAO,EAACC,UAAQ,EAACC,KAAML,EAAMM,UAC9C,kBAACf,EAAD,CACEgB,KAAK,OACLC,YAAaR,EAAMQ,YACnBC,MAAOT,EAAMU,KACbC,SAAUX,EAAMW,SAChBC,WAAYZ,EAAMY,gB,iBCkBXC,EAhCsB,SAACb,GAmBpC,OACE,kBAACP,EAAD,KACA,kBAAC,IAAD,CACEqB,QApBmB,CACnB,4CACA,qBACA,4CACA,oCACA,gDACA,gBACA,0BACA,2DACA,qCACA,sBACA,yCACA,2BACA,iBAQIC,UAAW,IACXC,SAAS,EACTC,aAAc,IACdC,WAAYlB,EAAMkB,e,iBC4CfC,EAtEO,WAAO,IAAD,EACQC,mBAAS,IADjB,mBACnBC,EADmB,KACRC,EADQ,OAEMF,oBAAS,GAFf,mBAEnBd,EAFmB,KAETiB,EAFS,OAGQH,oBAAS,GAHjB,mBAGnBI,EAHmB,KAGRC,EAHQ,OAIkBL,oBAAS,GAJ3B,mBAInBM,EAJmB,KAIHC,EAJG,OAKkBP,oBAAS,GAL3B,mBAKnBQ,EALmB,KAKHC,EALG,OAQAT,mBAAS,GART,mBAQnBU,EARmB,KAQZC,EARY,KAWpBnB,EAAU,uCAAG,WAAOoB,GAAP,SAAApC,EAAA,sDACH,UAAVoC,EAAEC,KACY,IAAbZ,IACW,GAATS,GACDH,GAAkB,GAClBI,EAASD,EAAM,IAEA,GAATA,GACND,GAAkB,GAClBE,EAASD,EAAM,IAETA,EAAQ,GACdC,EAASD,EAAM,GAIjBI,YAAW,WACRZ,EAAa,MACd,KAEFC,GAAY,GACZW,YAAW,WACRX,GAAY,KACb,MAvBW,2CAAH,sDA2ChB,OACE,yBAAKlC,UAAU,OACb,kBAACK,EAAD,CAAMyC,KAAK,gCAAgCC,OAAO,UAAS,yBAAKC,IAAKC,IAAMC,IAAI,OAAOC,OAAO,SAA7F,KAECZ,EAAiB,yBAAKa,GAAG,SAAR,KAA0B,KAC3Cf,EAAiB,yBAAKe,GAAG,aAAR,KAA8B,KAChD,yBAAKA,GAAG,UAAR,KACA,yBAAKA,GAAG,SAASpD,UAAU,UAA3B,KAEA,4BAAQA,UAAU,cACfmC,EAAY,kBAAC,EAAD,CAAUd,KAAMW,EAAWb,YAAY,0BAA0BI,WAAYA,EAAYD,SAxB3F,SAACqB,GAEhBV,EAAaU,EAAEI,OAAO3B,QAsBwGH,SAAUA,IAAe,kBAAC,EAAD,CAAOY,WAnB7I,WACjBgB,YAAW,WACTT,GAAa,GACbF,GAAY,GACZA,GAAY,KACX,WCjDamB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.86d2ec02.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.a33f8036.png\";","import styled from 'styled-components';\n\nconst InputBarStyled = styled.div.attrs({\n  className: 'InputBar',\n  autofocus: true,\n})`\n  display: flex;\n  align-items: center;\n  margin-top: 6rem;\n  margin-bottom: -2rem;\n  opacity: 1;\n  transition: opacity 1s ease-in;\n  -moz-transition: opacity 1s ease-in-out;\n  -webkit-transition: opacity 1s ease-in-out;\n`;\n\n\nconst InputText = styled.input.attrs({\n  className: 'InputText',\n  autofocus: true,\n})`\n  background-color: rgb(1, 1, 1, 0);\n  border-radius: 1rem;\n  border: none;\n  padding: 0.25rem 2.25rem;\n  font-size: 2rem;\n  height: 4rem;\n  width: 40rem;\n  margin-bottom: 100px;\n  color: white;\n  \n\n  ::placeholder {\n    color: white;\n    opacity: .1;\n  }\n  &:focus {\n    outline: none !important;\n  }\n`;\n\nconst IntroStyled = styled(InputBarStyled)`\nmargin-top: 0rem;\nfont-size: 2rem;\nopacity: 1;\ntransition: none;\n\n\n\n`;\n\nconst IntroStyledText = styled(InputText).attrs({\n  className: 'InputBar',\n  disabled: true,\n})`\n  font-size: 2rem;\n`;\n\nexport const Logo = styled.a`\n  position: fixed;\n  right: 50px;\n  bottom: 15px;\n  opacity: .5;\n\n  :hover {\n    cursor: pointer;\n    opacity: 1;\n  }\n`;\n\nexport {\n  InputBarStyled, InputText, IntroStyled, IntroStyledText\n};\n","import React from 'react';\nimport { InputBarStyled, InputText } from './styles';\nconst Fade = require('react-reveal/Fade');\n\n\ninterface IInputBarProps {\n    text: string;\n    placeholder: string;\n    onKeyPress: (e: React.KeyboardEvent<HTMLInputElement>) => void;\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n    showText: boolean;\n  }\n\n  \n  const InputBar: React.FC<IInputBarProps> = (props) => {\n\n    \n    return (\n      <InputBarStyled>\n      <Fade top opposite cascade collapse when={props.showText}>\n        <InputText\n          type='text'\n          placeholder={props.placeholder}\n          value={props.text}\n          onChange={props.onChange}\n          onKeyPress={props.onKeyPress}\n        />\n        </Fade>\n      \n\n      </InputBarStyled>\n    );\n  };\n  \n  export default InputBar;","import React, { useState } from 'react';\nimport { IntroStyled } from './styles';\nimport Typed from 'react-typed';\n\n\ninterface IIntroProps {\n    onComplete: (self?: Typed) => void\n}\n\n\n  \n  const Intro: React.FC<IIntroProps> = (props) => {\n\n    const welcomeStrings = [\n        'welcome to <strong>digital detox</strong>',\n        'take a deep breath',\n        'forget about the likes^1000, the comments',\n        '...your relatives\\' facebook rants',\n        'we know how important it is to stay connected',\n        '...plugged in',\n        '...on top of everything',\n        'but sometimes we all need to <strong>disconnect</strong>',\n        'so this is a place to do just that',\n        'let it all out^1000',\n        'send your thoughts out to the universe',\n        'and watch them disappear',\n        'try it out...',\n    ]\n\n    \n    return (\n      <IntroStyled>\n      <Typed\n        strings={welcomeStrings}\n            typeSpeed={100}\n            fadeOut={true}\n            fadeOutDelay={1000}\n            onComplete={props.onComplete}\n        />\n      </IntroStyled>\n    );\n  };\n  \n  export default Intro;","import React, { useState } from 'react';\nimport './App.css';\n\nimport InputBar from './InputBar';\nimport Intro from './Intro';\nimport { Logo } from './styles';\nimport logo from './logo.png';\n\n\n\n\nconst App: React.FC = () => {\n  const [inputText, setInputText] = useState('');\n  const [showText, setShowText] = useState(true);\n  const [showInput, setShowInput] = useState(false);\n  const [showMoreStars3, setShowMoreStars3] = useState(false);\n  const [showMoreStars6, setShowMoreStars6] = useState(false);\n\n\n  const [count, setCount] = useState(0);\n\n\n  const onKeyPress = async (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      if(inputText != '') {\n        if(count == 3) {\n          setShowMoreStars3(true);\n          setCount(count+1);\n        }\n        else if(count == 6) {\n          setShowMoreStars6(true);\n          setCount(count+1);\n        }\n        else if(count < 6){\n          setCount(count+1)\n        }\n \n          \n        setTimeout(() =>\n          {setInputText('')}, \n          500);\n        \n        setShowText(false);\n        setTimeout(() =>\n          {setShowText(true)}, \n          900);\n      }\n    }\n\n  }\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n\n    setInputText(e.target.value);\n  }\n\n  const onComplete = () => {\n    setTimeout(() => {\n      setShowInput(true);\n      setShowText(false);\n      setShowText(true);\n    }, 1000);\n  }\n\n\n  return (\n    <div className=\"App\">\n      <Logo href='https://www.kristenemoran.com' target='_blank'><img src={logo} alt=\"logo\" height=\"80px\" /> </Logo>\n\n      {showMoreStars6 ? <div id=\"stars\"> </div> : null}\n      {showMoreStars3 ? <div id=\"starsMore\"> </div> : null}\n      <div id=\"stars2\" > </div>\n      <div id=\"stars3\" className=\"stars3\"> </div>\n\n      <header className=\"App-header\">\n        {showInput ? <InputBar text={inputText} placeholder=\"type your thoughts here\" onKeyPress={onKeyPress} onChange={onChange} showText={showText}/>  : <Intro onComplete={onComplete} /> }       \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}