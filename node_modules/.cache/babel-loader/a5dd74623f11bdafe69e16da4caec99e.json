{"ast":null,"code":"/** @license\r\n *\r\n * SoundManager 2: JavaScript Sound for the Web\r\n * ----------------------------------------------\r\n * http://schillmania.com/projects/soundmanager2/\r\n *\r\n * Copyright (c) 2007, Scott Schiller. All rights reserved.\r\n * Code provided under the BSD License:\r\n * http://schillmania.com/projects/soundmanager2/license.txt\r\n *\r\n * V2.97a.20170601\r\n */\n(function SM2(window, _undefined) {\n  'use strict';\n\n  if (!window || !window.document) {\n    throw new Error('SoundManager requires a browser with window and document objects.');\n  }\n\n  var soundManager = null;\n\n  function SoundManager(smURL, smID) {\n    this.setupOptions = {\n      url: smURL || null,\n      flashVersion: 8,\n      debugMode: true,\n      debugFlash: false,\n      useConsole: true,\n      consoleOnly: true,\n      waitForWindowLoad: false,\n      bgColor: '#ffffff',\n      useHighPerformance: false,\n      flashPollingInterval: null,\n      html5PollingInterval: null,\n      flashLoadTimeout: 1000,\n      wmode: null,\n      allowScriptAccess: 'always',\n      useFlashBlock: false,\n      useHTML5Audio: true,\n      forceUseGlobalHTML5Audio: false,\n      ignoreMobileRestrictions: false,\n      html5Test: /^(probably|maybe)$/i,\n      preferFlash: false,\n      noSWFCache: false,\n      idPrefix: 'sound'\n    };\n    this.defaultOptions = {\n      autoLoad: false,\n      autoPlay: false,\n      from: null,\n      loops: 1,\n      onid3: null,\n      onerror: null,\n      onload: null,\n      whileloading: null,\n      onplay: null,\n      onpause: null,\n      onresume: null,\n      whileplaying: null,\n      onposition: null,\n      onstop: null,\n      onfinish: null,\n      multiShot: true,\n      multiShotEvents: false,\n      position: null,\n      pan: 0,\n      playbackRate: 1,\n      stream: true,\n      to: null,\n      type: null,\n      usePolicyFile: false,\n      volume: 100\n    };\n    this.flash9Options = {\n      onfailure: null,\n      isMovieStar: null,\n      usePeakData: false,\n      useWaveformData: false,\n      useEQData: false,\n      onbufferchange: null,\n      ondataerror: null\n    };\n    this.movieStarOptions = {\n      bufferTime: 3,\n      serverURL: null,\n      onconnect: null,\n      duration: null\n    };\n    this.audioFormats = {\n      mp3: {\n        type: ['audio/mpeg; codecs=\"mp3\"', 'audio/mpeg', 'audio/mp3', 'audio/MPA', 'audio/mpa-robust'],\n        required: true\n      },\n      mp4: {\n        related: ['aac', 'm4a', 'm4b'],\n        type: ['audio/mp4; codecs=\"mp4a.40.2\"', 'audio/aac', 'audio/x-m4a', 'audio/MP4A-LATM', 'audio/mpeg4-generic'],\n        required: false\n      },\n      ogg: {\n        type: ['audio/ogg; codecs=vorbis'],\n        required: false\n      },\n      opus: {\n        type: ['audio/ogg; codecs=opus', 'audio/opus'],\n        required: false\n      },\n      wav: {\n        type: ['audio/wav; codecs=\"1\"', 'audio/wav', 'audio/wave', 'audio/x-wav'],\n        required: false\n      },\n      flac: {\n        type: ['audio/flac'],\n        required: false\n      }\n    };\n    this.movieID = 'sm2-container';\n    this.id = smID || 'sm2movie';\n    this.debugID = 'soundmanager-debug';\n    this.debugURLParam = /([#?&])debug=1/i;\n    this.versionNumber = 'V2.97a.20170601';\n    this.version = null;\n    this.movieURL = null;\n    this.altURL = null;\n    this.swfLoaded = false;\n    this.enabled = false;\n    this.oMC = null;\n    this.sounds = {};\n    this.soundIDs = [];\n    this.muted = false;\n    this.didFlashBlock = false;\n    this.filePattern = null;\n    this.filePatterns = {\n      flash8: /\\.mp3(\\?.*)?$/i,\n      flash9: /\\.mp3(\\?.*)?$/i\n    };\n    this.features = {\n      buffering: false,\n      peakData: false,\n      waveformData: false,\n      eqData: false,\n      movieStar: false\n    };\n    this.sandbox = {};\n    this.html5 = {\n      usingFlash: null\n    };\n    this.flash = {};\n    this.html5Only = false;\n    this.ignoreFlash = false;\n\n    var SMSound,\n        sm2 = this,\n        globalHTML5Audio = null,\n        flash = null,\n        sm = 'soundManager',\n        smc = sm + ': ',\n        h5 = 'HTML5::',\n        id,\n        ua = navigator.userAgent,\n        wl = window.location.href.toString(),\n        doc = document,\n        doNothing,\n        setProperties,\n        init,\n        fV,\n        on_queue = [],\n        debugOpen = true,\n        debugTS,\n        didAppend = false,\n        appendSuccess = false,\n        didInit = false,\n        disabled = false,\n        windowLoaded = false,\n        _wDS,\n        wdCount = 0,\n        initComplete,\n        _mixin,\n        _assign,\n        extraOptions,\n        addOnEvent,\n        processOnEvents,\n        _initUserOnload,\n        delayWaitForEI,\n        waitForEI,\n        rebootIntoHTML5,\n        setVersionInfo,\n        _handleFocus,\n        strings,\n        initMovie,\n        _domContentLoaded,\n        _winOnLoad,\n        didDCLoaded,\n        getDocument,\n        createMovie,\n        catchError,\n        setPolling,\n        initDebug,\n        debugLevels = ['log', 'info', 'warn', 'error'],\n        defaultFlashVersion = 8,\n        disableObject,\n        failSafely,\n        normalizeMovieURL,\n        oRemoved = null,\n        oRemovedHTML = null,\n        str,\n        flashBlockHandler,\n        getSWFCSS,\n        swfCSS,\n        toggleDebug,\n        loopFix,\n        policyFix,\n        complain,\n        idCheck,\n        waitingForEI = false,\n        initPending = false,\n        startTimer,\n        stopTimer,\n        timerExecute,\n        h5TimerCount = 0,\n        h5IntervalTimer = null,\n        parseURL,\n        messages = [],\n        canIgnoreFlash,\n        needsFlash = null,\n        featureCheck,\n        html5OK,\n        html5CanPlay,\n        html5ErrorCodes,\n        html5Ext,\n        html5Unload,\n        _domContentLoadedIE,\n        testHTML5,\n        event,\n        slice = Array.prototype.slice,\n        useGlobalHTML5Audio = false,\n        lastGlobalHTML5URL,\n        hasFlash,\n        detectFlash,\n        badSafariFix,\n        html5_events,\n        showSupport,\n        flushMessages,\n        wrapCallback,\n        idCounter = 0,\n        didSetup,\n        msecScale = 1000,\n        is_iDevice = ua.match(/(ipad|iphone|ipod)/i),\n        isAndroid = ua.match(/android/i),\n        isIE = ua.match(/msie|trident/i),\n        isWebkit = ua.match(/webkit/i),\n        isSafari = ua.match(/safari/i) && !ua.match(/chrome/i),\n        isOpera = ua.match(/opera/i),\n        mobileHTML5 = ua.match(/(mobile|pre\\/|xoom)/i) || is_iDevice || isAndroid,\n        isBadSafari = !wl.match(/usehtml5audio/i) && !wl.match(/sm2-ignorebadua/i) && isSafari && !ua.match(/silk/i) && ua.match(/OS\\sX\\s10_6_([3-7])/i),\n        hasConsole = window.console !== _undefined && console.log !== _undefined,\n        isFocused = doc.hasFocus !== _undefined ? doc.hasFocus() : null,\n        tryInitOnFocus = isSafari && (doc.hasFocus === _undefined || !doc.hasFocus()),\n        okToDisable = !tryInitOnFocus,\n        flashMIME = /(mp3|mp4|mpa|m4a|m4b)/i,\n        emptyURL = 'about:blank',\n        emptyWAV = 'data:audio/wave;base64,/UklGRiYAAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YQIAAAD//w==',\n        overHTTP = doc.location ? doc.location.protocol.match(/http/i) : null,\n        http = !overHTTP ? '//' : '',\n        netStreamMimeTypes = /^\\s*audio\\/(?:x-)?(?:mpeg4|aac|flv|mov|mp4|m4v|m4a|m4b|mp4v|3gp|3g2)\\s*(?:$|;)/i,\n        netStreamTypes = ['mpeg4', 'aac', 'flv', 'mov', 'mp4', 'm4v', 'f4v', 'm4a', 'm4b', 'mp4v', '3gp', '3g2'],\n        netStreamPattern = new RegExp('\\\\.(' + netStreamTypes.join('|') + ')(\\\\?.*)?$', 'i');\n\n    this.mimePattern = /^\\s*audio\\/(?:x-)?(?:mp(?:eg|3))\\s*(?:$|;)/i;\n    this.useAltURL = !overHTTP;\n    swfCSS = {\n      swfBox: 'sm2-object-box',\n      swfDefault: 'movieContainer',\n      swfError: 'swf_error',\n      swfTimedout: 'swf_timedout',\n      swfLoaded: 'swf_loaded',\n      swfUnblocked: 'swf_unblocked',\n      sm2Debug: 'sm2_debug',\n      highPerf: 'high_performance',\n      flashDebug: 'flash_debug'\n    };\n    html5ErrorCodes = [null, 'MEDIA_ERR_ABORTED', 'MEDIA_ERR_NETWORK', 'MEDIA_ERR_DECODE', 'MEDIA_ERR_SRC_NOT_SUPPORTED'];\n\n    this.hasHTML5 = function () {\n      try {\n        return Audio !== _undefined && (isOpera && opera !== _undefined && opera.version() < 10 ? new Audio(null) : new Audio()).canPlayType !== _undefined;\n      } catch (e) {\n        return false;\n      }\n    }();\n\n    this.setup = function (options) {\n      var noURL = !sm2.url;\n\n      if (options !== _undefined && didInit && needsFlash && sm2.ok() && (options.flashVersion !== _undefined || options.url !== _undefined || options.html5Test !== _undefined)) {}\n\n      _assign(options);\n\n      if (!useGlobalHTML5Audio) {\n        if (mobileHTML5) {\n          if (!sm2.setupOptions.ignoreMobileRestrictions || sm2.setupOptions.forceUseGlobalHTML5Audio) {\n            messages.push(strings.globalHTML5);\n            useGlobalHTML5Audio = true;\n          }\n        } else if (sm2.setupOptions.forceUseGlobalHTML5Audio) {\n          messages.push(strings.globalHTML5);\n          useGlobalHTML5Audio = true;\n        }\n      }\n\n      if (!didSetup && mobileHTML5) {\n        if (sm2.setupOptions.ignoreMobileRestrictions) {\n          messages.push(strings.ignoreMobile);\n        } else {\n          sm2.setupOptions.useHTML5Audio = true;\n          sm2.setupOptions.preferFlash = false;\n\n          if (is_iDevice) {\n            sm2.ignoreFlash = true;\n          } else if (isAndroid && !ua.match(/android\\s2\\.3/i) || !isAndroid) {\n            useGlobalHTML5Audio = true;\n          }\n        }\n      }\n\n      if (options) {\n        if (noURL && didDCLoaded && options.url !== _undefined) {\n          sm2.beginDelayedInit();\n        }\n\n        if (!didDCLoaded && options.url !== _undefined && doc.readyState === 'complete') {\n          setTimeout(_domContentLoaded, 1);\n        }\n      }\n\n      didSetup = true;\n      return sm2;\n    };\n\n    this.ok = function () {\n      return needsFlash ? didInit && !disabled : sm2.useHTML5Audio && sm2.hasHTML5;\n    };\n\n    this.supported = this.ok;\n\n    this.getMovie = function (movie_id) {\n      return id(movie_id) || doc[movie_id] || window[movie_id];\n    };\n\n    this.createSound = function (oOptions, _url) {\n      var cs,\n          cs_string,\n          options,\n          oSound = null;\n\n      if (!didInit || !sm2.ok()) {\n        return false;\n      }\n\n      if (_url !== _undefined) {\n        oOptions = {\n          id: oOptions,\n          url: _url\n        };\n      }\n\n      options = _mixin(oOptions);\n      options.url = parseURL(options.url);\n\n      if (options.id === _undefined) {\n        options.id = sm2.setupOptions.idPrefix + idCounter++;\n      }\n\n      if (idCheck(options.id, true)) {\n        return sm2.sounds[options.id];\n      }\n\n      function make() {\n        options = loopFix(options);\n        sm2.sounds[options.id] = new SMSound(options);\n        sm2.soundIDs.push(options.id);\n        return sm2.sounds[options.id];\n      }\n\n      if (html5OK(options)) {\n        oSound = make();\n\n        oSound._setup_html5(options);\n      } else {\n        if (sm2.html5Only) {\n          return make();\n        }\n\n        if (sm2.html5.usingFlash && options.url && options.url.match(/data:/i)) {\n          return make();\n        }\n\n        if (fV > 8) {\n          if (options.isMovieStar === null) {\n            options.isMovieStar = !!(options.serverURL || (options.type ? options.type.match(netStreamMimeTypes) : false) || options.url && options.url.match(netStreamPattern));\n          }\n        }\n\n        options = policyFix(options, cs);\n        oSound = make();\n\n        if (fV === 8) {\n          flash._createSound(options.id, options.loops || 1, options.usePolicyFile);\n        } else {\n          flash._createSound(options.id, options.url, options.usePeakData, options.useWaveformData, options.useEQData, options.isMovieStar, options.isMovieStar ? options.bufferTime : false, options.loops || 1, options.serverURL, options.duration || null, options.autoPlay, true, options.autoLoad, options.usePolicyFile);\n\n          if (!options.serverURL) {\n            oSound.connected = true;\n\n            if (options.onconnect) {\n              options.onconnect.apply(oSound);\n            }\n          }\n        }\n\n        if (!options.serverURL && (options.autoLoad || options.autoPlay)) {\n          oSound.load(options);\n        }\n      }\n\n      if (!options.serverURL && options.autoPlay) {\n        oSound.play();\n      }\n\n      return oSound;\n    };\n\n    this.destroySound = function (sID, _bFromSound) {\n      if (!idCheck(sID)) return false;\n      var oS = sm2.sounds[sID],\n          i;\n      oS.stop();\n      oS._iO = {};\n      oS.unload();\n\n      for (i = 0; i < sm2.soundIDs.length; i++) {\n        if (sm2.soundIDs[i] === sID) {\n          sm2.soundIDs.splice(i, 1);\n          break;\n        }\n      }\n\n      if (!_bFromSound) {\n        oS.destruct(true);\n      }\n\n      oS = null;\n      delete sm2.sounds[sID];\n      return true;\n    };\n\n    this.load = function (sID, oOptions) {\n      if (!idCheck(sID)) return false;\n      return sm2.sounds[sID].load(oOptions);\n    };\n\n    this.unload = function (sID) {\n      if (!idCheck(sID)) return false;\n      return sm2.sounds[sID].unload();\n    };\n\n    this.onPosition = function (sID, nPosition, oMethod, oScope) {\n      if (!idCheck(sID)) return false;\n      return sm2.sounds[sID].onposition(nPosition, oMethod, oScope);\n    };\n\n    this.onposition = this.onPosition;\n\n    this.clearOnPosition = function (sID, nPosition, oMethod) {\n      if (!idCheck(sID)) return false;\n      return sm2.sounds[sID].clearOnPosition(nPosition, oMethod);\n    };\n\n    this.play = function (sID, oOptions) {\n      var result = null,\n          overloaded = oOptions && !(oOptions instanceof Object);\n\n      if (!didInit || !sm2.ok()) {\n        return false;\n      }\n\n      if (!idCheck(sID, overloaded)) {\n        if (!overloaded) return false;\n\n        if (overloaded) {\n          oOptions = {\n            url: oOptions\n          };\n        }\n\n        if (oOptions && oOptions.url) {\n          oOptions.id = sID;\n          result = sm2.createSound(oOptions).play();\n        }\n      } else if (overloaded) {\n        oOptions = {\n          url: oOptions\n        };\n      }\n\n      if (result === null) {\n        result = sm2.sounds[sID].play(oOptions);\n      }\n\n      return result;\n    };\n\n    this.start = this.play;\n\n    this.setPlaybackRate = function (sID, rate, allowOverride) {\n      if (!idCheck(sID)) return false;\n      return sm2.sounds[sID].setPlaybackRate(rate, allowOverride);\n    };\n\n    this.setPosition = function (sID, nMsecOffset) {\n      if (!idCheck(sID)) return false;\n      return sm2.sounds[sID].setPosition(nMsecOffset);\n    };\n\n    this.stop = function (sID) {\n      if (!idCheck(sID)) return false;\n      return sm2.sounds[sID].stop();\n    };\n\n    this.stopAll = function () {\n      var oSound;\n\n      for (oSound in sm2.sounds) {\n        if (sm2.sounds.hasOwnProperty(oSound)) {\n          sm2.sounds[oSound].stop();\n        }\n      }\n    };\n\n    this.pause = function (sID) {\n      if (!idCheck(sID)) return false;\n      return sm2.sounds[sID].pause();\n    };\n\n    this.pauseAll = function () {\n      var i;\n\n      for (i = sm2.soundIDs.length - 1; i >= 0; i--) {\n        sm2.sounds[sm2.soundIDs[i]].pause();\n      }\n    };\n\n    this.resume = function (sID) {\n      if (!idCheck(sID)) return false;\n      return sm2.sounds[sID].resume();\n    };\n\n    this.resumeAll = function () {\n      var i;\n\n      for (i = sm2.soundIDs.length - 1; i >= 0; i--) {\n        sm2.sounds[sm2.soundIDs[i]].resume();\n      }\n    };\n\n    this.togglePause = function (sID) {\n      if (!idCheck(sID)) return false;\n      return sm2.sounds[sID].togglePause();\n    };\n\n    this.setPan = function (sID, nPan) {\n      if (!idCheck(sID)) return false;\n      return sm2.sounds[sID].setPan(nPan);\n    };\n\n    this.setVolume = function (sID, nVol) {\n      var i, j;\n\n      if (sID !== _undefined && !isNaN(sID) && nVol === _undefined) {\n        for (i = 0, j = sm2.soundIDs.length; i < j; i++) {\n          sm2.sounds[sm2.soundIDs[i]].setVolume(sID);\n        }\n\n        return false;\n      }\n\n      if (!idCheck(sID)) return false;\n      return sm2.sounds[sID].setVolume(nVol);\n    };\n\n    this.mute = function (sID) {\n      var i = 0;\n\n      if (sID instanceof String) {\n        sID = null;\n      }\n\n      if (!sID) {\n        for (i = sm2.soundIDs.length - 1; i >= 0; i--) {\n          sm2.sounds[sm2.soundIDs[i]].mute();\n        }\n\n        sm2.muted = true;\n      } else {\n        if (!idCheck(sID)) return false;\n        return sm2.sounds[sID].mute();\n      }\n\n      return true;\n    };\n\n    this.muteAll = function () {\n      sm2.mute();\n    };\n\n    this.unmute = function (sID) {\n      var i;\n\n      if (sID instanceof String) {\n        sID = null;\n      }\n\n      if (!sID) {\n        for (i = sm2.soundIDs.length - 1; i >= 0; i--) {\n          sm2.sounds[sm2.soundIDs[i]].unmute();\n        }\n\n        sm2.muted = false;\n      } else {\n        if (!idCheck(sID)) return false;\n        return sm2.sounds[sID].unmute();\n      }\n\n      return true;\n    };\n\n    this.unmuteAll = function () {\n      sm2.unmute();\n    };\n\n    this.toggleMute = function (sID) {\n      if (!idCheck(sID)) return false;\n      return sm2.sounds[sID].toggleMute();\n    };\n\n    this.getMemoryUse = function () {\n      var ram = 0;\n\n      if (flash && fV !== 8) {\n        ram = parseInt(flash._getMemoryUse(), 10);\n      }\n\n      return ram;\n    };\n\n    this.disable = function (bNoDisable) {\n      var i;\n\n      if (bNoDisable === _undefined) {\n        bNoDisable = false;\n      }\n\n      if (disabled) return false;\n      disabled = true;\n\n      for (i = sm2.soundIDs.length - 1; i >= 0; i--) {\n        disableObject(sm2.sounds[sm2.soundIDs[i]]);\n      }\n\n      disableObject(sm2);\n      initComplete(bNoDisable);\n      event.remove(window, 'load', _initUserOnload);\n      return true;\n    };\n\n    this.canPlayMIME = function (sMIME) {\n      var result;\n\n      if (sm2.hasHTML5) {\n        result = html5CanPlay({\n          type: sMIME\n        });\n      }\n\n      if (!result && needsFlash) {\n        result = sMIME && sm2.ok() ? !!((fV > 8 ? sMIME.match(netStreamMimeTypes) : null) || sMIME.match(sm2.mimePattern)) : null;\n      }\n\n      return result;\n    };\n\n    this.canPlayURL = function (sURL) {\n      var result;\n\n      if (sm2.hasHTML5) {\n        result = html5CanPlay({\n          url: sURL\n        });\n      }\n\n      if (!result && needsFlash) {\n        result = sURL && sm2.ok() ? !!sURL.match(sm2.filePattern) : null;\n      }\n\n      return result;\n    };\n\n    this.canPlayLink = function (oLink) {\n      if (oLink.type !== _undefined && oLink.type && sm2.canPlayMIME(oLink.type)) return true;\n      return sm2.canPlayURL(oLink.href);\n    };\n\n    this.getSoundById = function (sID, _suppressDebug) {\n      if (!sID) return null;\n      var result = sm2.sounds[sID];\n      return result;\n    };\n\n    this.onready = function (oMethod, oScope) {\n      var sType = 'onready',\n          result = false;\n\n      if (typeof oMethod === 'function') {\n        if (!oScope) {\n          oScope = window;\n        }\n\n        addOnEvent(sType, oMethod, oScope);\n        processOnEvents();\n        result = true;\n      } else {\n        throw str('needFunction', sType);\n      }\n\n      return result;\n    };\n\n    this.ontimeout = function (oMethod, oScope) {\n      var sType = 'ontimeout',\n          result = false;\n\n      if (typeof oMethod === 'function') {\n        if (!oScope) {\n          oScope = window;\n        }\n\n        addOnEvent(sType, oMethod, oScope);\n        processOnEvents({\n          type: sType\n        });\n        result = true;\n      } else {\n        throw str('needFunction', sType);\n      }\n\n      return result;\n    };\n\n    this._writeDebug = function (sText, sTypeOrObject) {\n      return true;\n    };\n\n    this._wD = this._writeDebug;\n\n    this._debug = function () {};\n\n    this.reboot = function (resetEvents, excludeInit) {\n      var i, j, k;\n\n      for (i = sm2.soundIDs.length - 1; i >= 0; i--) {\n        sm2.sounds[sm2.soundIDs[i]].destruct();\n      }\n\n      if (flash) {\n        try {\n          if (isIE) {\n            oRemovedHTML = flash.innerHTML;\n          }\n\n          oRemoved = flash.parentNode.removeChild(flash);\n        } catch (e) {}\n      }\n\n      oRemovedHTML = oRemoved = needsFlash = flash = null;\n      sm2.enabled = didDCLoaded = didInit = waitingForEI = initPending = didAppend = appendSuccess = disabled = useGlobalHTML5Audio = sm2.swfLoaded = false;\n      sm2.soundIDs = [];\n      sm2.sounds = {};\n      idCounter = 0;\n      didSetup = false;\n\n      if (!resetEvents) {\n        for (i in on_queue) {\n          if (on_queue.hasOwnProperty(i)) {\n            for (j = 0, k = on_queue[i].length; j < k; j++) {\n              on_queue[i][j].fired = false;\n            }\n          }\n        }\n      } else {\n        on_queue = [];\n      }\n\n      sm2.html5 = {\n        usingFlash: null\n      };\n      sm2.flash = {};\n      sm2.html5Only = false;\n      sm2.ignoreFlash = false;\n      window.setTimeout(function () {\n        if (!excludeInit) {\n          sm2.beginDelayedInit();\n        }\n      }, 20);\n      return sm2;\n    };\n\n    this.reset = function () {\n      return sm2.reboot(true, true);\n    };\n\n    this.getMoviePercent = function () {\n      return flash && 'PercentLoaded' in flash ? flash.PercentLoaded() : null;\n    };\n\n    this.beginDelayedInit = function () {\n      windowLoaded = true;\n\n      _domContentLoaded();\n\n      setTimeout(function () {\n        if (initPending) return false;\n        createMovie();\n        initMovie();\n        initPending = true;\n        return true;\n      }, 20);\n      delayWaitForEI();\n    };\n\n    this.destruct = function () {\n      sm2.disable(true);\n    };\n\n    SMSound = function SMSound(oOptions) {\n      var s = this,\n          resetProperties,\n          add_html5_events,\n          remove_html5_events,\n          stop_html5_timer,\n          start_html5_timer,\n          attachOnPosition,\n          onplay_called = false,\n          onPositionItems = [],\n          onPositionFired = 0,\n          detachOnPosition,\n          applyFromTo,\n          lastURL = null,\n          lastHTML5State,\n          urlOmitted;\n      lastHTML5State = {\n        duration: null,\n        time: null\n      };\n      this.id = oOptions.id;\n      this.sID = this.id;\n      this.url = oOptions.url;\n      this.options = _mixin(oOptions);\n      this.instanceOptions = this.options;\n      this._iO = this.instanceOptions;\n      this.pan = this.options.pan;\n      this.volume = this.options.volume;\n      this.isHTML5 = false;\n      this._a = null;\n      urlOmitted = !this.url;\n      this.id3 = {};\n\n      this._debug = function () {};\n\n      this.load = function (options) {\n        var oSound = null,\n            instanceOptions;\n\n        if (options !== _undefined) {\n          s._iO = _mixin(options, s.options);\n        } else {\n          options = s.options;\n          s._iO = options;\n\n          if (lastURL && lastURL !== s.url) {\n            s._iO.url = s.url;\n            s.url = null;\n          }\n        }\n\n        if (!s._iO.url) {\n          s._iO.url = s.url;\n        }\n\n        s._iO.url = parseURL(s._iO.url);\n        s.instanceOptions = s._iO;\n        instanceOptions = s._iO;\n\n        if (!instanceOptions.url && !s.url) {\n          return s;\n        }\n\n        if (instanceOptions.url === s.url && s.readyState !== 0 && s.readyState !== 2) {\n          if (s.readyState === 3 && instanceOptions.onload) {\n            wrapCallback(s, function () {\n              instanceOptions.onload.apply(s, [!!s.duration]);\n            });\n          }\n\n          return s;\n        }\n\n        s.loaded = false;\n        s.readyState = 1;\n        s.playState = 0;\n        s.id3 = {};\n\n        if (html5OK(instanceOptions)) {\n          oSound = s._setup_html5(instanceOptions);\n\n          if (!oSound._called_load) {\n            s._html5_canplay = false;\n\n            if (s.url !== instanceOptions.url) {\n              s._a.src = instanceOptions.url;\n              s.setPosition(0);\n            }\n\n            s._a.autobuffer = 'auto';\n            s._a.preload = 'auto';\n            s._a._called_load = true;\n          } else {}\n        } else {\n          if (sm2.html5Only) {\n            return s;\n          }\n\n          if (s._iO.url && s._iO.url.match(/data:/i)) {\n            return s;\n          }\n\n          try {\n            s.isHTML5 = false;\n            s._iO = policyFix(loopFix(instanceOptions));\n\n            if (s._iO.autoPlay && (s._iO.position || s._iO.from)) {\n              s._iO.autoPlay = false;\n            }\n\n            instanceOptions = s._iO;\n\n            if (fV === 8) {\n              flash._load(s.id, instanceOptions.url, instanceOptions.stream, instanceOptions.autoPlay, instanceOptions.usePolicyFile);\n            } else {\n              flash._load(s.id, instanceOptions.url, !!instanceOptions.stream, !!instanceOptions.autoPlay, instanceOptions.loops || 1, !!instanceOptions.autoLoad, instanceOptions.usePolicyFile);\n            }\n          } catch (e) {\n            catchError({\n              type: 'SMSOUND_LOAD_JS_EXCEPTION',\n              fatal: true\n            });\n          }\n        }\n\n        s.url = instanceOptions.url;\n        return s;\n      };\n\n      this.unload = function () {\n        if (s.readyState !== 0) {\n          if (!s.isHTML5) {\n            if (fV === 8) {\n              flash._unload(s.id, emptyURL);\n            } else {\n              flash._unload(s.id);\n            }\n          } else {\n            stop_html5_timer();\n\n            if (s._a) {\n              s._a.pause();\n\n              lastURL = html5Unload(s._a);\n            }\n          }\n\n          resetProperties();\n        }\n\n        return s;\n      };\n\n      this.destruct = function (_bFromSM) {\n        if (!s.isHTML5) {\n          s._iO.onfailure = null;\n\n          flash._destroySound(s.id);\n        } else {\n          stop_html5_timer();\n\n          if (s._a) {\n            s._a.pause();\n\n            html5Unload(s._a);\n\n            if (!useGlobalHTML5Audio) {\n              remove_html5_events();\n            }\n\n            s._a._s = null;\n            s._a = null;\n          }\n        }\n\n        if (!_bFromSM) {\n          sm2.destroySound(s.id, true);\n        }\n      };\n\n      this.play = function (options, _updatePlayState) {\n        var fN,\n            allowMulti,\n            a,\n            onready,\n            audioClone,\n            _onended,\n            _oncanplay,\n            startOK = true;\n\n        _updatePlayState = _updatePlayState === _undefined ? true : _updatePlayState;\n\n        if (!options) {\n          options = {};\n        }\n\n        if (s.url) {\n          s._iO.url = s.url;\n        }\n\n        s._iO = _mixin(s._iO, s.options);\n        s._iO = _mixin(options, s._iO);\n        s._iO.url = parseURL(s._iO.url);\n        s.instanceOptions = s._iO;\n\n        if (!s.isHTML5 && s._iO.serverURL && !s.connected) {\n          if (!s.getAutoPlay()) {\n            s.setAutoPlay(true);\n          }\n\n          return s;\n        }\n\n        if (html5OK(s._iO)) {\n          s._setup_html5(s._iO);\n\n          start_html5_timer();\n        }\n\n        if (s.playState === 1 && !s.paused) {\n          allowMulti = s._iO.multiShot;\n\n          if (!allowMulti) {\n            if (s.isHTML5) {\n              s.setPosition(s._iO.position);\n            }\n\n            return s;\n          }\n        }\n\n        if (options.url && options.url !== s.url) {\n          if (!s.readyState && !s.isHTML5 && fV === 8 && urlOmitted) {\n            urlOmitted = false;\n          } else {\n            s.load(s._iO);\n          }\n        }\n\n        if (!s.loaded) {\n          if (s.readyState === 0) {\n            if (!s.isHTML5 && !sm2.html5Only) {\n              s._iO.autoPlay = true;\n              s.load(s._iO);\n            } else if (s.isHTML5) {\n              s.load(s._iO);\n            } else {\n              return s;\n            }\n\n            s.instanceOptions = s._iO;\n          } else if (s.readyState === 2) {\n            return s;\n          } else {}\n        } else {}\n\n        if (!s.isHTML5 && fV === 9 && s.position > 0 && s.position === s.duration) {\n          options.position = 0;\n        }\n\n        if (s.paused && s.position >= 0 && (!s._iO.serverURL || s.position > 0)) {\n          s.resume();\n        } else {\n          s._iO = _mixin(options, s._iO);\n\n          if ((!s.isHTML5 && s._iO.position !== null && s._iO.position > 0 || s._iO.from !== null && s._iO.from > 0 || s._iO.to !== null) && s.instanceCount === 0 && s.playState === 0 && !s._iO.serverURL) {\n            onready = function onready() {\n              s._iO = _mixin(options, s._iO);\n              s.play(s._iO);\n            };\n\n            if (s.isHTML5 && !s._html5_canplay) {\n              s.load({\n                _oncanplay: onready\n              });\n            } else if (!s.isHTML5 && !s.loaded && (!s.readyState || s.readyState !== 2)) {\n              s.load({\n                onload: onready\n              });\n            }\n\n            s._iO = applyFromTo();\n          }\n\n          if (!s.instanceCount || s._iO.multiShotEvents || s.isHTML5 && s._iO.multiShot && !useGlobalHTML5Audio || !s.isHTML5 && fV > 8 && !s.getAutoPlay()) {\n            s.instanceCount++;\n          }\n\n          if (s._iO.onposition && s.playState === 0) {\n            attachOnPosition(s);\n          }\n\n          s.playState = 1;\n          s.paused = false;\n          s.position = s._iO.position !== _undefined && !isNaN(s._iO.position) ? s._iO.position : 0;\n\n          if (!s.isHTML5) {\n            s._iO = policyFix(loopFix(s._iO));\n          }\n\n          if (s._iO.onplay && _updatePlayState) {\n            s._iO.onplay.apply(s);\n\n            onplay_called = true;\n          }\n\n          s.setVolume(s._iO.volume, true);\n          s.setPan(s._iO.pan, true);\n\n          if (s._iO.playbackRate !== 1) {\n            s.setPlaybackRate(s._iO.playbackRate);\n          }\n\n          if (!s.isHTML5) {\n            startOK = flash._start(s.id, s._iO.loops || 1, fV === 9 ? s.position : s.position / msecScale, s._iO.multiShot || false);\n\n            if (fV === 9 && !startOK) {\n              if (s._iO.onplayerror) {\n                s._iO.onplayerror.apply(s);\n              }\n            }\n          } else if (s.instanceCount < 2) {\n            start_html5_timer();\n            a = s._setup_html5();\n            s.setPosition(s._iO.position);\n            a.play();\n          } else {\n            audioClone = new Audio(s._iO.url);\n\n            _onended = function onended() {\n              event.remove(audioClone, 'ended', _onended);\n\n              s._onfinish(s);\n\n              html5Unload(audioClone);\n              audioClone = null;\n            };\n\n            _oncanplay = function oncanplay() {\n              event.remove(audioClone, 'canplay', _oncanplay);\n\n              try {\n                audioClone.currentTime = s._iO.position / msecScale;\n              } catch (err) {}\n\n              audioClone.play();\n            };\n\n            event.add(audioClone, 'ended', _onended);\n\n            if (s._iO.volume !== _undefined) {\n              audioClone.volume = Math.max(0, Math.min(1, s._iO.volume / 100));\n            }\n\n            if (s.muted) {\n              audioClone.muted = true;\n            }\n\n            if (s._iO.position) {\n              event.add(audioClone, 'canplay', _oncanplay);\n            } else {\n              audioClone.play();\n            }\n          }\n        }\n\n        return s;\n      };\n\n      this.start = this.play;\n\n      this.stop = function (bAll) {\n        var instanceOptions = s._iO,\n            originalPosition;\n\n        if (s.playState === 1) {\n          s._onbufferchange(0);\n\n          s._resetOnPosition(0);\n\n          s.paused = false;\n\n          if (!s.isHTML5) {\n            s.playState = 0;\n          }\n\n          detachOnPosition();\n\n          if (instanceOptions.to) {\n            s.clearOnPosition(instanceOptions.to);\n          }\n\n          if (!s.isHTML5) {\n            flash._stop(s.id, bAll);\n\n            if (instanceOptions.serverURL) {\n              s.unload();\n            }\n          } else if (s._a) {\n            originalPosition = s.position;\n            s.setPosition(0);\n            s.position = originalPosition;\n\n            s._a.pause();\n\n            s.playState = 0;\n\n            s._onTimer();\n\n            stop_html5_timer();\n          }\n\n          s.instanceCount = 0;\n          s._iO = {};\n\n          if (instanceOptions.onstop) {\n            instanceOptions.onstop.apply(s);\n          }\n        }\n\n        return s;\n      };\n\n      this.setAutoPlay = function (autoPlay) {\n        s._iO.autoPlay = autoPlay;\n\n        if (!s.isHTML5) {\n          flash._setAutoPlay(s.id, autoPlay);\n\n          if (autoPlay) {\n            if (!s.instanceCount && s.readyState === 1) {\n              s.instanceCount++;\n            }\n          }\n        }\n      };\n\n      this.getAutoPlay = function () {\n        return s._iO.autoPlay;\n      };\n\n      this.setPlaybackRate = function (playbackRate) {\n        var normalizedRate = Math.max(0.5, Math.min(4, playbackRate));\n\n        if (s.isHTML5) {\n          try {\n            s._iO.playbackRate = normalizedRate;\n            s._a.playbackRate = normalizedRate;\n          } catch (e) {}\n        }\n\n        return s;\n      };\n\n      this.setPosition = function (nMsecOffset) {\n        if (nMsecOffset === _undefined) {\n          nMsecOffset = 0;\n        }\n\n        var position,\n            position1K,\n            offset = s.isHTML5 ? Math.max(nMsecOffset, 0) : Math.min(s.duration || s._iO.duration, Math.max(nMsecOffset, 0));\n        s.position = offset;\n        position1K = s.position / msecScale;\n\n        s._resetOnPosition(s.position);\n\n        s._iO.position = offset;\n\n        if (!s.isHTML5) {\n          position = fV === 9 ? s.position : position1K;\n\n          if (s.readyState && s.readyState !== 2) {\n            flash._setPosition(s.id, position, s.paused || !s.playState, s._iO.multiShot);\n          }\n        } else if (s._a) {\n          if (s._html5_canplay) {\n            if (s._a.currentTime.toFixed(3) !== position1K.toFixed(3)) {\n              try {\n                s._a.currentTime = position1K;\n\n                if (s.playState === 0 || s.paused) {\n                  s._a.pause();\n                }\n              } catch (e) {}\n            }\n          } else if (position1K) {\n            return s;\n          }\n\n          if (s.paused) {\n            s._onTimer(true);\n          }\n        }\n\n        return s;\n      };\n\n      this.pause = function (_bCallFlash) {\n        if (s.paused || s.playState === 0 && s.readyState !== 1) return s;\n        s.paused = true;\n\n        if (!s.isHTML5) {\n          if (_bCallFlash || _bCallFlash === _undefined) {\n            flash._pause(s.id, s._iO.multiShot);\n          }\n        } else {\n          s._setup_html5().pause();\n\n          stop_html5_timer();\n        }\n\n        if (s._iO.onpause) {\n          s._iO.onpause.apply(s);\n        }\n\n        return s;\n      };\n\n      this.resume = function () {\n        var instanceOptions = s._iO;\n        if (!s.paused) return s;\n        s.paused = false;\n        s.playState = 1;\n\n        if (!s.isHTML5) {\n          if (instanceOptions.isMovieStar && !instanceOptions.serverURL) {\n            s.setPosition(s.position);\n          }\n\n          flash._pause(s.id, instanceOptions.multiShot);\n        } else {\n          s._setup_html5().play();\n\n          start_html5_timer();\n        }\n\n        if (!onplay_called && instanceOptions.onplay) {\n          instanceOptions.onplay.apply(s);\n          onplay_called = true;\n        } else if (instanceOptions.onresume) {\n          instanceOptions.onresume.apply(s);\n        }\n\n        return s;\n      };\n\n      this.togglePause = function () {\n        if (s.playState === 0) {\n          s.play({\n            position: fV === 9 && !s.isHTML5 ? s.position : s.position / msecScale\n          });\n          return s;\n        }\n\n        if (s.paused) {\n          s.resume();\n        } else {\n          s.pause();\n        }\n\n        return s;\n      };\n\n      this.setPan = function (nPan, bInstanceOnly) {\n        if (nPan === _undefined) {\n          nPan = 0;\n        }\n\n        if (bInstanceOnly === _undefined) {\n          bInstanceOnly = false;\n        }\n\n        if (!s.isHTML5) {\n          flash._setPan(s.id, nPan);\n        }\n\n        s._iO.pan = nPan;\n\n        if (!bInstanceOnly) {\n          s.pan = nPan;\n          s.options.pan = nPan;\n        }\n\n        return s;\n      };\n\n      this.setVolume = function (nVol, _bInstanceOnly) {\n        if (nVol === _undefined) {\n          nVol = 100;\n        }\n\n        if (_bInstanceOnly === _undefined) {\n          _bInstanceOnly = false;\n        }\n\n        if (!s.isHTML5) {\n          flash._setVolume(s.id, sm2.muted && !s.muted || s.muted ? 0 : nVol);\n        } else if (s._a) {\n          if (sm2.muted && !s.muted) {\n            s.muted = true;\n            s._a.muted = true;\n          }\n\n          s._a.volume = Math.max(0, Math.min(1, nVol / 100));\n        }\n\n        s._iO.volume = nVol;\n\n        if (!_bInstanceOnly) {\n          s.volume = nVol;\n          s.options.volume = nVol;\n        }\n\n        return s;\n      };\n\n      this.mute = function () {\n        s.muted = true;\n\n        if (!s.isHTML5) {\n          flash._setVolume(s.id, 0);\n        } else if (s._a) {\n          s._a.muted = true;\n        }\n\n        return s;\n      };\n\n      this.unmute = function () {\n        s.muted = false;\n        var hasIO = s._iO.volume !== _undefined;\n\n        if (!s.isHTML5) {\n          flash._setVolume(s.id, hasIO ? s._iO.volume : s.options.volume);\n        } else if (s._a) {\n          s._a.muted = false;\n        }\n\n        return s;\n      };\n\n      this.toggleMute = function () {\n        return s.muted ? s.unmute() : s.mute();\n      };\n\n      this.onPosition = function (nPosition, oMethod, oScope) {\n        onPositionItems.push({\n          position: parseInt(nPosition, 10),\n          method: oMethod,\n          scope: oScope !== _undefined ? oScope : s,\n          fired: false\n        });\n        return s;\n      };\n\n      this.onposition = this.onPosition;\n\n      this.clearOnPosition = function (nPosition, oMethod) {\n        var i;\n        nPosition = parseInt(nPosition, 10);\n\n        if (isNaN(nPosition)) {\n          return;\n        }\n\n        for (i = 0; i < onPositionItems.length; i++) {\n          if (nPosition === onPositionItems[i].position) {\n            if (!oMethod || oMethod === onPositionItems[i].method) {\n              if (onPositionItems[i].fired) {\n                onPositionFired--;\n              }\n\n              onPositionItems.splice(i, 1);\n            }\n          }\n        }\n      };\n\n      this._processOnPosition = function () {\n        var i,\n            item,\n            j = onPositionItems.length;\n        if (!j || !s.playState || onPositionFired >= j) return false;\n\n        for (i = j - 1; i >= 0; i--) {\n          item = onPositionItems[i];\n\n          if (!item.fired && s.position >= item.position) {\n            item.fired = true;\n            onPositionFired++;\n            item.method.apply(item.scope, [item.position]);\n            j = onPositionItems.length;\n          }\n        }\n\n        return true;\n      };\n\n      this._resetOnPosition = function (nPosition) {\n        var i,\n            item,\n            j = onPositionItems.length;\n        if (!j) return false;\n\n        for (i = j - 1; i >= 0; i--) {\n          item = onPositionItems[i];\n\n          if (item.fired && nPosition <= item.position) {\n            item.fired = false;\n            onPositionFired--;\n          }\n        }\n\n        return true;\n      };\n\n      applyFromTo = function applyFromTo() {\n        var instanceOptions = s._iO,\n            f = instanceOptions.from,\n            t = instanceOptions.to,\n            start,\n            _end;\n\n        _end = function end() {\n          s.clearOnPosition(t, _end);\n          s.stop();\n        };\n\n        start = function start() {\n          if (t !== null && !isNaN(t)) {\n            s.onPosition(t, _end);\n          }\n        };\n\n        if (f !== null && !isNaN(f)) {\n          instanceOptions.position = f;\n          instanceOptions.multiShot = false;\n          start();\n        }\n\n        return instanceOptions;\n      };\n\n      attachOnPosition = function attachOnPosition() {\n        var item,\n            op = s._iO.onposition;\n\n        if (op) {\n          for (item in op) {\n            if (op.hasOwnProperty(item)) {\n              s.onPosition(parseInt(item, 10), op[item]);\n            }\n          }\n        }\n      };\n\n      detachOnPosition = function detachOnPosition() {\n        var item,\n            op = s._iO.onposition;\n\n        if (op) {\n          for (item in op) {\n            if (op.hasOwnProperty(item)) {\n              s.clearOnPosition(parseInt(item, 10));\n            }\n          }\n        }\n      };\n\n      start_html5_timer = function start_html5_timer() {\n        if (s.isHTML5) {\n          startTimer(s);\n        }\n      };\n\n      stop_html5_timer = function stop_html5_timer() {\n        if (s.isHTML5) {\n          stopTimer(s);\n        }\n      };\n\n      resetProperties = function resetProperties(retainPosition) {\n        if (!retainPosition) {\n          onPositionItems = [];\n          onPositionFired = 0;\n        }\n\n        onplay_called = false;\n        s._hasTimer = null;\n        s._a = null;\n        s._html5_canplay = false;\n        s.bytesLoaded = null;\n        s.bytesTotal = null;\n        s.duration = s._iO && s._iO.duration ? s._iO.duration : null;\n        s.durationEstimate = null;\n        s.buffered = [];\n        s.eqData = [];\n        s.eqData.left = [];\n        s.eqData.right = [];\n        s.failures = 0;\n        s.isBuffering = false;\n        s.instanceOptions = {};\n        s.instanceCount = 0;\n        s.loaded = false;\n        s.metadata = {};\n        s.readyState = 0;\n        s.muted = false;\n        s.paused = false;\n        s.peakData = {\n          left: 0,\n          right: 0\n        };\n        s.waveformData = {\n          left: [],\n          right: []\n        };\n        s.playState = 0;\n        s.position = null;\n        s.id3 = {};\n      };\n\n      resetProperties();\n\n      this._onTimer = function (bForce) {\n        var duration,\n            isNew = false,\n            time,\n            x = {};\n\n        if (s._hasTimer || bForce) {\n          if (s._a && (bForce || (s.playState > 0 || s.readyState === 1) && !s.paused)) {\n            duration = s._get_html5_duration();\n\n            if (duration !== lastHTML5State.duration) {\n              lastHTML5State.duration = duration;\n              s.duration = duration;\n              isNew = true;\n            }\n\n            s.durationEstimate = s.duration;\n            time = s._a.currentTime * msecScale || 0;\n\n            if (time !== lastHTML5State.time) {\n              lastHTML5State.time = time;\n              isNew = true;\n            }\n\n            if (isNew || bForce) {\n              s._whileplaying(time, x, x, x, x);\n            }\n          }\n        }\n\n        return isNew;\n      };\n\n      this._get_html5_duration = function () {\n        var instanceOptions = s._iO,\n            d = s._a && s._a.duration ? s._a.duration * msecScale : instanceOptions && instanceOptions.duration ? instanceOptions.duration : null,\n            result = d && !isNaN(d) && d !== Infinity ? d : null;\n        return result;\n      };\n\n      this._apply_loop = function (a, nLoops) {\n        a.loop = nLoops > 1 ? 'loop' : '';\n      };\n\n      this._setup_html5 = function (options) {\n        var instanceOptions = _mixin(s._iO, options),\n            a = useGlobalHTML5Audio ? globalHTML5Audio : s._a,\n            dURL = decodeURI(instanceOptions.url),\n            sameURL;\n\n        if (useGlobalHTML5Audio) {\n          if (dURL === decodeURI(lastGlobalHTML5URL)) {\n            sameURL = true;\n          }\n        } else if (dURL === decodeURI(lastURL)) {\n          sameURL = true;\n        }\n\n        if (a) {\n          if (a._s) {\n            if (useGlobalHTML5Audio) {\n              if (a._s && a._s.playState && !sameURL) {\n                a._s.stop();\n              }\n            } else if (!useGlobalHTML5Audio && dURL === decodeURI(lastURL)) {\n              s._apply_loop(a, instanceOptions.loops);\n\n              return a;\n            }\n          }\n\n          if (!sameURL) {\n            if (lastURL) {\n              resetProperties(false);\n            }\n\n            a.src = instanceOptions.url;\n            s.url = instanceOptions.url;\n            lastURL = instanceOptions.url;\n            lastGlobalHTML5URL = instanceOptions.url;\n            a._called_load = false;\n          }\n        } else {\n          if (instanceOptions.autoLoad || instanceOptions.autoPlay) {\n            s._a = new Audio(instanceOptions.url);\n\n            s._a.load();\n          } else {\n            s._a = isOpera && opera.version() < 10 ? new Audio(null) : new Audio();\n          }\n\n          a = s._a;\n          a._called_load = false;\n\n          if (useGlobalHTML5Audio) {\n            globalHTML5Audio = a;\n          }\n        }\n\n        s.isHTML5 = true;\n        s._a = a;\n        a._s = s;\n        add_html5_events();\n\n        s._apply_loop(a, instanceOptions.loops);\n\n        if (instanceOptions.autoLoad || instanceOptions.autoPlay) {\n          s.load();\n        } else {\n          a.autobuffer = false;\n          a.preload = 'auto';\n        }\n\n        return a;\n      };\n\n      add_html5_events = function add_html5_events() {\n        if (s._a._added_events) return false;\n        var f;\n\n        function add(oEvt, oFn, bCapture) {\n          return s._a ? s._a.addEventListener(oEvt, oFn, bCapture || false) : null;\n        }\n\n        s._a._added_events = true;\n\n        for (f in html5_events) {\n          if (html5_events.hasOwnProperty(f)) {\n            add(f, html5_events[f]);\n          }\n        }\n\n        return true;\n      };\n\n      remove_html5_events = function remove_html5_events() {\n        var f;\n\n        function remove(oEvt, oFn, bCapture) {\n          return s._a ? s._a.removeEventListener(oEvt, oFn, bCapture || false) : null;\n        }\n\n        s._a._added_events = false;\n\n        for (f in html5_events) {\n          if (html5_events.hasOwnProperty(f)) {\n            remove(f, html5_events[f]);\n          }\n        }\n      };\n\n      this._onload = function (nSuccess) {\n        var fN,\n            loadOK = !!nSuccess || !s.isHTML5 && fV === 8 && s.duration;\n        s.loaded = loadOK;\n        s.readyState = loadOK ? 3 : 2;\n\n        s._onbufferchange(0);\n\n        if (!loadOK && !s.isHTML5) {\n          s._onerror();\n        }\n\n        if (s._iO.onload) {\n          wrapCallback(s, function () {\n            s._iO.onload.apply(s, [loadOK]);\n          });\n        }\n\n        return true;\n      };\n\n      this._onerror = function (errorCode, description) {\n        if (s._iO.onerror) {\n          wrapCallback(s, function () {\n            s._iO.onerror.apply(s, [errorCode, description]);\n          });\n        }\n      };\n\n      this._onbufferchange = function (nIsBuffering) {\n        if (s.playState === 0) return false;\n        if (nIsBuffering && s.isBuffering || !nIsBuffering && !s.isBuffering) return false;\n        s.isBuffering = nIsBuffering === 1;\n\n        if (s._iO.onbufferchange) {\n          s._iO.onbufferchange.apply(s, [nIsBuffering]);\n        }\n\n        return true;\n      };\n\n      this._onsuspend = function () {\n        if (s._iO.onsuspend) {\n          s._iO.onsuspend.apply(s);\n        }\n\n        return true;\n      };\n\n      this._onfailure = function (msg, level, code) {\n        s.failures++;\n\n        if (s._iO.onfailure && s.failures === 1) {\n          s._iO.onfailure(msg, level, code);\n        } else {}\n      };\n\n      this._onwarning = function (msg, level, code) {\n        if (s._iO.onwarning) {\n          s._iO.onwarning(msg, level, code);\n        }\n      };\n\n      this._onfinish = function () {\n        var io_onfinish = s._iO.onfinish;\n\n        s._onbufferchange(0);\n\n        s._resetOnPosition(0);\n\n        if (s.instanceCount) {\n          s.instanceCount--;\n\n          if (!s.instanceCount) {\n            detachOnPosition();\n            s.playState = 0;\n            s.paused = false;\n            s.instanceCount = 0;\n            s.instanceOptions = {};\n            s._iO = {};\n            stop_html5_timer();\n\n            if (s.isHTML5) {\n              s.position = 0;\n            }\n          }\n\n          if (!s.instanceCount || s._iO.multiShotEvents) {\n            if (io_onfinish) {\n              wrapCallback(s, function () {\n                io_onfinish.apply(s);\n              });\n            }\n          }\n        }\n      };\n\n      this._whileloading = function (nBytesLoaded, nBytesTotal, nDuration, nBufferLength) {\n        var instanceOptions = s._iO;\n        s.bytesLoaded = nBytesLoaded;\n        s.bytesTotal = nBytesTotal;\n        s.duration = Math.floor(nDuration);\n        s.bufferLength = nBufferLength;\n\n        if (!s.isHTML5 && !instanceOptions.isMovieStar) {\n          if (instanceOptions.duration) {\n            s.durationEstimate = s.duration > instanceOptions.duration ? s.duration : instanceOptions.duration;\n          } else {\n            s.durationEstimate = parseInt(s.bytesTotal / s.bytesLoaded * s.duration, 10);\n          }\n        } else {\n          s.durationEstimate = s.duration;\n        }\n\n        if (!s.isHTML5) {\n          s.buffered = [{\n            start: 0,\n            end: s.duration\n          }];\n        }\n\n        if ((s.readyState !== 3 || s.isHTML5) && instanceOptions.whileloading) {\n          instanceOptions.whileloading.apply(s);\n        }\n      };\n\n      this._whileplaying = function (nPosition, oPeakData, oWaveformDataLeft, oWaveformDataRight, oEQData) {\n        var instanceOptions = s._iO,\n            eqLeft;\n        if (isNaN(nPosition) || nPosition === null) return false;\n        s.position = Math.max(0, nPosition);\n\n        s._processOnPosition();\n\n        if (!s.isHTML5 && fV > 8) {\n          if (instanceOptions.usePeakData && oPeakData !== _undefined && oPeakData) {\n            s.peakData = {\n              left: oPeakData.leftPeak,\n              right: oPeakData.rightPeak\n            };\n          }\n\n          if (instanceOptions.useWaveformData && oWaveformDataLeft !== _undefined && oWaveformDataLeft) {\n            s.waveformData = {\n              left: oWaveformDataLeft.split(','),\n              right: oWaveformDataRight.split(',')\n            };\n          }\n\n          if (instanceOptions.useEQData) {\n            if (oEQData !== _undefined && oEQData && oEQData.leftEQ) {\n              eqLeft = oEQData.leftEQ.split(',');\n              s.eqData = eqLeft;\n              s.eqData.left = eqLeft;\n\n              if (oEQData.rightEQ !== _undefined && oEQData.rightEQ) {\n                s.eqData.right = oEQData.rightEQ.split(',');\n              }\n            }\n          }\n        }\n\n        if (s.playState === 1) {\n          if (!s.isHTML5 && fV === 8 && !s.position && s.isBuffering) {\n            s._onbufferchange(0);\n          }\n\n          if (instanceOptions.whileplaying) {\n            instanceOptions.whileplaying.apply(s);\n          }\n        }\n\n        return true;\n      };\n\n      this._oncaptiondata = function (oData) {\n        s.captiondata = oData;\n\n        if (s._iO.oncaptiondata) {\n          s._iO.oncaptiondata.apply(s, [oData]);\n        }\n      };\n\n      this._onmetadata = function (oMDProps, oMDData) {\n        var oData = {},\n            i,\n            j;\n\n        for (i = 0, j = oMDProps.length; i < j; i++) {\n          oData[oMDProps[i]] = oMDData[i];\n        }\n\n        s.metadata = oData;\n\n        if (s._iO.onmetadata) {\n          s._iO.onmetadata.call(s, s.metadata);\n        }\n      };\n\n      this._onid3 = function (oID3Props, oID3Data) {\n        var oData = [],\n            i,\n            j;\n\n        for (i = 0, j = oID3Props.length; i < j; i++) {\n          oData[oID3Props[i]] = oID3Data[i];\n        }\n\n        s.id3 = _mixin(s.id3, oData);\n\n        if (s._iO.onid3) {\n          s._iO.onid3.apply(s);\n        }\n      };\n\n      this._onconnect = function (bSuccess) {\n        bSuccess = bSuccess === 1;\n        s.connected = bSuccess;\n\n        if (bSuccess) {\n          s.failures = 0;\n\n          if (idCheck(s.id)) {\n            if (s.getAutoPlay()) {\n              s.play(_undefined, s.getAutoPlay());\n            } else if (s._iO.autoLoad) {\n              s.load();\n            }\n          }\n\n          if (s._iO.onconnect) {\n            s._iO.onconnect.apply(s, [bSuccess]);\n          }\n        }\n      };\n\n      this._ondataerror = function (sError) {\n        if (s.playState > 0) {\n          if (s._iO.ondataerror) {\n            s._iO.ondataerror.apply(s);\n          }\n        }\n      };\n    };\n\n    getDocument = function getDocument() {\n      return doc.body || doc.getElementsByTagName('div')[0];\n    };\n\n    id = function id(sID) {\n      return doc.getElementById(sID);\n    };\n\n    _mixin = function mixin(oMain, oAdd) {\n      var o1 = oMain || {},\n          o2,\n          o;\n      o2 = oAdd === _undefined ? sm2.defaultOptions : oAdd;\n\n      for (o in o2) {\n        if (o2.hasOwnProperty(o) && o1[o] === _undefined) {\n          if (typeof o2[o] !== 'object' || o2[o] === null) {\n            o1[o] = o2[o];\n          } else {\n            o1[o] = _mixin(o1[o], o2[o]);\n          }\n        }\n      }\n\n      return o1;\n    };\n\n    wrapCallback = function wrapCallback(oSound, callback) {\n      if (!oSound.isHTML5 && fV === 8) {\n        window.setTimeout(callback, 0);\n      } else {\n        callback();\n      }\n    };\n\n    extraOptions = {\n      onready: 1,\n      ontimeout: 1,\n      defaultOptions: 1,\n      flash9Options: 1,\n      movieStarOptions: 1\n    };\n\n    _assign = function assign(o, oParent) {\n      var i,\n          result = true,\n          hasParent = oParent !== _undefined,\n          setupOptions = sm2.setupOptions,\n          bonusOptions = extraOptions;\n\n      for (i in o) {\n        if (o.hasOwnProperty(i)) {\n          if (typeof o[i] !== 'object' || o[i] === null || o[i] instanceof Array || o[i] instanceof RegExp) {\n            if (hasParent && bonusOptions[oParent] !== _undefined) {\n              sm2[oParent][i] = o[i];\n            } else if (setupOptions[i] !== _undefined) {\n              sm2.setupOptions[i] = o[i];\n              sm2[i] = o[i];\n            } else if (bonusOptions[i] === _undefined) {\n              result = false;\n            } else if (sm2[i] instanceof Function) {\n              sm2[i].apply(sm2, o[i] instanceof Array ? o[i] : [o[i]]);\n            } else {\n              sm2[i] = o[i];\n            }\n          } else if (bonusOptions[i] === _undefined) {\n            result = false;\n          } else {\n            return _assign(o[i], i);\n          }\n        }\n      }\n\n      return result;\n    };\n\n    function preferFlashCheck(kind) {\n      return sm2.preferFlash && hasFlash && !sm2.ignoreFlash && sm2.flash[kind] !== _undefined && sm2.flash[kind];\n    }\n\n    event = function () {\n      var old = window.attachEvent,\n          evt = {\n        add: old ? 'attachEvent' : 'addEventListener',\n        remove: old ? 'detachEvent' : 'removeEventListener'\n      };\n\n      function getArgs(oArgs) {\n        var args = slice.call(oArgs),\n            len = args.length;\n\n        if (old) {\n          args[1] = 'on' + args[1];\n\n          if (len > 3) {\n            args.pop();\n          }\n        } else if (len === 3) {\n          args.push(false);\n        }\n\n        return args;\n      }\n\n      function apply(args, sType) {\n        var element = args.shift(),\n            method = [evt[sType]];\n\n        if (old) {\n          element[method](args[0], args[1]);\n        } else {\n          element[method].apply(element, args);\n        }\n      }\n\n      function add() {\n        apply(getArgs(arguments), 'add');\n      }\n\n      function remove() {\n        apply(getArgs(arguments), 'remove');\n      }\n\n      return {\n        add: add,\n        remove: remove\n      };\n    }();\n\n    function html5_event(oFn) {\n      return function (e) {\n        var s = this._s,\n            result;\n\n        if (!s || !s._a) {\n          result = null;\n        } else {\n          result = oFn.call(this, e);\n        }\n\n        return result;\n      };\n    }\n\n    html5_events = {\n      abort: html5_event(function () {}),\n      canplay: html5_event(function () {\n        var s = this._s,\n            position1K;\n\n        if (s._html5_canplay) {\n          return;\n        }\n\n        s._html5_canplay = true;\n\n        s._onbufferchange(0);\n\n        position1K = s._iO.position !== _undefined && !isNaN(s._iO.position) ? s._iO.position / msecScale : null;\n\n        if (this.currentTime !== position1K) {\n          try {\n            this.currentTime = position1K;\n          } catch (ee) {}\n        }\n\n        if (s._iO._oncanplay) {\n          s._iO._oncanplay();\n        }\n      }),\n      canplaythrough: html5_event(function () {\n        var s = this._s;\n\n        if (!s.loaded) {\n          s._onbufferchange(0);\n\n          s._whileloading(s.bytesLoaded, s.bytesTotal, s._get_html5_duration());\n\n          s._onload(true);\n        }\n      }),\n      durationchange: html5_event(function () {\n        var s = this._s,\n            duration;\n        duration = s._get_html5_duration();\n\n        if (!isNaN(duration) && duration !== s.duration) {\n          s.durationEstimate = s.duration = duration;\n        }\n      }),\n      ended: html5_event(function () {\n        var s = this._s;\n\n        s._onfinish();\n      }),\n      error: html5_event(function () {\n        var description = html5ErrorCodes[this.error.code] || null;\n\n        this._s._onload(false);\n\n        this._s._onerror(this.error.code, description);\n      }),\n      loadeddata: html5_event(function () {\n        var s = this._s;\n\n        if (!s._loaded && !isSafari) {\n          s.duration = s._get_html5_duration();\n        }\n      }),\n      loadedmetadata: html5_event(function () {}),\n      loadstart: html5_event(function () {\n        this._s._onbufferchange(1);\n      }),\n      play: html5_event(function () {\n        this._s._onbufferchange(0);\n      }),\n      playing: html5_event(function () {\n        this._s._onbufferchange(0);\n      }),\n      progress: html5_event(function (e) {\n        var s = this._s,\n            i,\n            j,\n            progStr,\n            buffered = 0,\n            isProgress = e.type === 'progress',\n            ranges = e.target.buffered,\n            loaded = e.loaded || 0,\n            total = e.total || 1;\n        s.buffered = [];\n\n        if (ranges && ranges.length) {\n          for (i = 0, j = ranges.length; i < j; i++) {\n            s.buffered.push({\n              start: ranges.start(i) * msecScale,\n              end: ranges.end(i) * msecScale\n            });\n          }\n\n          buffered = (ranges.end(0) - ranges.start(0)) * msecScale;\n          loaded = Math.min(1, buffered / (e.target.duration * msecScale));\n        }\n\n        if (!isNaN(loaded)) {\n          s._whileloading(loaded, total, s._get_html5_duration());\n\n          if (loaded && total && loaded === total) {\n            html5_events.canplaythrough.call(this, e);\n          }\n        }\n      }),\n      ratechange: html5_event(function () {}),\n      suspend: html5_event(function (e) {\n        var s = this._s;\n        html5_events.progress.call(this, e);\n\n        s._onsuspend();\n      }),\n      stalled: html5_event(function () {}),\n      timeupdate: html5_event(function () {\n        this._s._onTimer();\n      }),\n      waiting: html5_event(function () {\n        var s = this._s;\n\n        s._onbufferchange(1);\n      })\n    };\n\n    html5OK = function html5OK(iO) {\n      var result;\n\n      if (!iO || !iO.type && !iO.url && !iO.serverURL) {\n        result = false;\n      } else if (iO.serverURL || iO.type && preferFlashCheck(iO.type)) {\n        result = false;\n      } else {\n        result = iO.type ? html5CanPlay({\n          type: iO.type\n        }) : html5CanPlay({\n          url: iO.url\n        }) || sm2.html5Only || iO.url.match(/data:/i);\n      }\n\n      return result;\n    };\n\n    html5Unload = function html5Unload(oAudio) {\n      var url;\n\n      if (oAudio) {\n        url = isSafari ? emptyURL : sm2.html5.canPlayType('audio/wav') ? emptyWAV : emptyURL;\n        oAudio.src = url;\n\n        if (oAudio._called_unload !== _undefined) {\n          oAudio._called_load = false;\n        }\n      }\n\n      if (useGlobalHTML5Audio) {\n        lastGlobalHTML5URL = null;\n      }\n\n      return url;\n    };\n\n    html5CanPlay = function html5CanPlay(o) {\n      if (!sm2.useHTML5Audio || !sm2.hasHTML5) return false;\n      var url = o.url || null,\n          mime = o.type || null,\n          aF = sm2.audioFormats,\n          result,\n          offset,\n          fileExt,\n          item;\n      if (mime && sm2.html5[mime] !== _undefined) return sm2.html5[mime] && !preferFlashCheck(mime);\n\n      if (!html5Ext) {\n        html5Ext = [];\n\n        for (item in aF) {\n          if (aF.hasOwnProperty(item)) {\n            html5Ext.push(item);\n\n            if (aF[item].related) {\n              html5Ext = html5Ext.concat(aF[item].related);\n            }\n          }\n        }\n\n        html5Ext = new RegExp('\\\\.(' + html5Ext.join('|') + ')(\\\\?.*)?$', 'i');\n      }\n\n      fileExt = url ? url.toLowerCase().match(html5Ext) : null;\n\n      if (!fileExt || !fileExt.length) {\n        if (!mime) {\n          result = false;\n        } else {\n          offset = mime.indexOf(';');\n          fileExt = (offset !== -1 ? mime.substr(0, offset) : mime).substr(6);\n        }\n      } else {\n        fileExt = fileExt[1];\n      }\n\n      if (fileExt && sm2.html5[fileExt] !== _undefined) {\n        result = sm2.html5[fileExt] && !preferFlashCheck(fileExt);\n      } else {\n        mime = 'audio/' + fileExt;\n        result = sm2.html5.canPlayType({\n          type: mime\n        });\n        sm2.html5[fileExt] = result;\n        result = result && sm2.html5[mime] && !preferFlashCheck(mime);\n      }\n\n      return result;\n    };\n\n    testHTML5 = function testHTML5() {\n      if (!sm2.useHTML5Audio || !sm2.hasHTML5) {\n        sm2.html5.usingFlash = true;\n        needsFlash = true;\n        return false;\n      }\n\n      var a = Audio !== _undefined ? isOpera && opera.version() < 10 ? new Audio(null) : new Audio() : null,\n          item,\n          lookup,\n          support = {},\n          aF,\n          i;\n\n      function cp(m) {\n        var canPlay,\n            j,\n            result = false,\n            isOK = false;\n        if (!a || typeof a.canPlayType !== 'function') return result;\n\n        if (m instanceof Array) {\n          for (i = 0, j = m.length; i < j; i++) {\n            if (sm2.html5[m[i]] || a.canPlayType(m[i]).match(sm2.html5Test)) {\n              isOK = true;\n              sm2.html5[m[i]] = true;\n              sm2.flash[m[i]] = !!m[i].match(flashMIME);\n            }\n          }\n\n          result = isOK;\n        } else {\n          canPlay = a && typeof a.canPlayType === 'function' ? a.canPlayType(m) : false;\n          result = !!(canPlay && canPlay.match(sm2.html5Test));\n        }\n\n        return result;\n      }\n\n      aF = sm2.audioFormats;\n\n      for (item in aF) {\n        if (aF.hasOwnProperty(item)) {\n          lookup = 'audio/' + item;\n          support[item] = cp(aF[item].type);\n          support[lookup] = support[item];\n\n          if (item.match(flashMIME)) {\n            sm2.flash[item] = true;\n            sm2.flash[lookup] = true;\n          } else {\n            sm2.flash[item] = false;\n            sm2.flash[lookup] = false;\n          }\n\n          if (aF[item] && aF[item].related) {\n            for (i = aF[item].related.length - 1; i >= 0; i--) {\n              support['audio/' + aF[item].related[i]] = support[item];\n              sm2.html5[aF[item].related[i]] = support[item];\n              sm2.flash[aF[item].related[i]] = support[item];\n            }\n          }\n        }\n      }\n\n      support.canPlayType = a ? cp : null;\n      sm2.html5 = _mixin(sm2.html5, support);\n      sm2.html5.usingFlash = featureCheck();\n      needsFlash = sm2.html5.usingFlash;\n      return true;\n    };\n\n    strings = {};\n\n    str = function str() {};\n\n    loopFix = function loopFix(sOpt) {\n      if (fV === 8 && sOpt.loops > 1 && sOpt.stream) {\n        sOpt.stream = false;\n      }\n\n      return sOpt;\n    };\n\n    policyFix = function policyFix(sOpt, sPre) {\n      if (sOpt && !sOpt.usePolicyFile && (sOpt.onid3 || sOpt.usePeakData || sOpt.useWaveformData || sOpt.useEQData)) {\n        sOpt.usePolicyFile = true;\n      }\n\n      return sOpt;\n    };\n\n    complain = function complain(sMsg) {};\n\n    doNothing = function doNothing() {\n      return false;\n    };\n\n    disableObject = function disableObject(o) {\n      var oProp;\n\n      for (oProp in o) {\n        if (o.hasOwnProperty(oProp) && typeof o[oProp] === 'function') {\n          o[oProp] = doNothing;\n        }\n      }\n\n      oProp = null;\n    };\n\n    failSafely = function failSafely(bNoDisable) {\n      if (bNoDisable === _undefined) {\n        bNoDisable = false;\n      }\n\n      if (disabled || bNoDisable) {\n        sm2.disable(bNoDisable);\n      }\n    };\n\n    normalizeMovieURL = function normalizeMovieURL(movieURL) {\n      var urlParams = null,\n          url;\n\n      if (movieURL) {\n        if (movieURL.match(/\\.swf(\\?.*)?$/i)) {\n          urlParams = movieURL.substr(movieURL.toLowerCase().lastIndexOf('.swf?') + 4);\n          if (urlParams) return movieURL;\n        } else if (movieURL.lastIndexOf('/') !== movieURL.length - 1) {\n          movieURL += '/';\n        }\n      }\n\n      url = (movieURL && movieURL.lastIndexOf('/') !== -1 ? movieURL.substr(0, movieURL.lastIndexOf('/') + 1) : './') + sm2.movieURL;\n\n      if (sm2.noSWFCache) {\n        url += '?ts=' + new Date().getTime();\n      }\n\n      return url;\n    };\n\n    setVersionInfo = function setVersionInfo() {\n      fV = parseInt(sm2.flashVersion, 10);\n\n      if (fV !== 8 && fV !== 9) {\n        sm2.flashVersion = fV = defaultFlashVersion;\n      }\n\n      var isDebug = sm2.debugMode || sm2.debugFlash ? '_debug.swf' : '.swf';\n\n      if (sm2.useHTML5Audio && !sm2.html5Only && sm2.audioFormats.mp4.required && fV < 9) {\n        sm2.flashVersion = fV = 9;\n      }\n\n      sm2.version = sm2.versionNumber + (sm2.html5Only ? ' (HTML5-only mode)' : fV === 9 ? ' (AS3/Flash 9)' : ' (AS2/Flash 8)');\n\n      if (fV > 8) {\n        sm2.defaultOptions = _mixin(sm2.defaultOptions, sm2.flash9Options);\n        sm2.features.buffering = true;\n        sm2.defaultOptions = _mixin(sm2.defaultOptions, sm2.movieStarOptions);\n        sm2.filePatterns.flash9 = new RegExp('\\\\.(mp3|' + netStreamTypes.join('|') + ')(\\\\?.*)?$', 'i');\n        sm2.features.movieStar = true;\n      } else {\n        sm2.features.movieStar = false;\n      }\n\n      sm2.filePattern = sm2.filePatterns[fV !== 8 ? 'flash9' : 'flash8'];\n      sm2.movieURL = (fV === 8 ? 'soundmanager2.swf' : 'soundmanager2_flash9.swf').replace('.swf', isDebug);\n      sm2.features.peakData = sm2.features.waveformData = sm2.features.eqData = fV > 8;\n    };\n\n    setPolling = function setPolling(bPolling, bHighPerformance) {\n      if (!flash) {\n        return;\n      }\n\n      flash._setPolling(bPolling, bHighPerformance);\n    };\n\n    initDebug = function initDebug() {};\n\n    idCheck = this.getSoundById;\n\n    getSWFCSS = function getSWFCSS() {\n      var css = [];\n\n      if (sm2.debugMode) {\n        css.push(swfCSS.sm2Debug);\n      }\n\n      if (sm2.debugFlash) {\n        css.push(swfCSS.flashDebug);\n      }\n\n      if (sm2.useHighPerformance) {\n        css.push(swfCSS.highPerf);\n      }\n\n      return css.join(' ');\n    };\n\n    flashBlockHandler = function flashBlockHandler() {\n      var name = str('fbHandler'),\n          p = sm2.getMoviePercent(),\n          css = swfCSS,\n          error = {\n        type: 'FLASHBLOCK'\n      };\n\n      if (sm2.html5Only) {\n        return;\n      }\n\n      if (!sm2.ok()) {\n        if (needsFlash) {\n          sm2.oMC.className = getSWFCSS() + ' ' + css.swfDefault + ' ' + (p === null ? css.swfTimedout : css.swfError);\n        }\n\n        sm2.didFlashBlock = true;\n        processOnEvents({\n          type: 'ontimeout',\n          ignoreInit: true,\n          error: error\n        });\n        catchError(error);\n      } else {\n        if (sm2.oMC) {\n          sm2.oMC.className = [getSWFCSS(), css.swfDefault, css.swfLoaded + (sm2.didFlashBlock ? ' ' + css.swfUnblocked : '')].join(' ');\n        }\n      }\n    };\n\n    addOnEvent = function addOnEvent(sType, oMethod, oScope) {\n      if (on_queue[sType] === _undefined) {\n        on_queue[sType] = [];\n      }\n\n      on_queue[sType].push({\n        method: oMethod,\n        scope: oScope || null,\n        fired: false\n      });\n    };\n\n    processOnEvents = function processOnEvents(oOptions) {\n      if (!oOptions) {\n        oOptions = {\n          type: sm2.ok() ? 'onready' : 'ontimeout'\n        };\n      }\n\n      if (!didInit && oOptions && !oOptions.ignoreInit) return false;\n      if (oOptions.type === 'ontimeout' && (sm2.ok() || disabled && !oOptions.ignoreInit)) return false;\n      var status = {\n        success: oOptions && oOptions.ignoreInit ? sm2.ok() : !disabled\n      },\n          srcQueue = oOptions && oOptions.type ? on_queue[oOptions.type] || [] : [],\n          queue = [],\n          i,\n          j,\n          args = [status],\n          canRetry = needsFlash && !sm2.ok();\n\n      if (oOptions.error) {\n        args[0].error = oOptions.error;\n      }\n\n      for (i = 0, j = srcQueue.length; i < j; i++) {\n        if (srcQueue[i].fired !== true) {\n          queue.push(srcQueue[i]);\n        }\n      }\n\n      if (queue.length) {\n        for (i = 0, j = queue.length; i < j; i++) {\n          if (queue[i].scope) {\n            queue[i].method.apply(queue[i].scope, args);\n          } else {\n            queue[i].method.apply(this, args);\n          }\n\n          if (!canRetry) {\n            queue[i].fired = true;\n          }\n        }\n      }\n\n      return true;\n    };\n\n    _initUserOnload = function initUserOnload() {\n      window.setTimeout(function () {\n        if (sm2.useFlashBlock) {\n          flashBlockHandler();\n        }\n\n        processOnEvents();\n\n        if (typeof sm2.onload === 'function') {\n          sm2.onload.apply(window);\n        }\n\n        if (sm2.waitForWindowLoad) {\n          event.add(window, 'load', _initUserOnload);\n        }\n      }, 1);\n    };\n\n    detectFlash = function detectFlash() {\n      if (hasFlash !== _undefined) return hasFlash;\n      var hasPlugin = false,\n          n = navigator,\n          obj,\n          type,\n          types,\n          AX = window.ActiveXObject;\n      var nP;\n\n      try {\n        nP = n.plugins;\n      } catch (e) {\n        nP = undefined;\n      }\n\n      if (nP && nP.length) {\n        type = 'application/x-shockwave-flash';\n        types = n.mimeTypes;\n\n        if (types && types[type] && types[type].enabledPlugin && types[type].enabledPlugin.description) {\n          hasPlugin = true;\n        }\n      } else if (AX !== _undefined && !ua.match(/MSAppHost/i)) {\n        try {\n          obj = new AX('ShockwaveFlash.ShockwaveFlash');\n        } catch (e) {\n          obj = null;\n        }\n\n        hasPlugin = !!obj;\n        obj = null;\n      }\n\n      hasFlash = hasPlugin;\n      return hasPlugin;\n    };\n\n    featureCheck = function featureCheck() {\n      var flashNeeded,\n          item,\n          formats = sm2.audioFormats,\n          isSpecial = is_iDevice && !!ua.match(/os (1|2|3_0|3_1)\\s/i);\n\n      if (isSpecial) {\n        sm2.hasHTML5 = false;\n        sm2.html5Only = true;\n\n        if (sm2.oMC) {\n          sm2.oMC.style.display = 'none';\n        }\n      } else if (sm2.useHTML5Audio) {\n        if (!sm2.html5 || !sm2.html5.canPlayType) {\n          sm2.hasHTML5 = false;\n        }\n      }\n\n      if (sm2.useHTML5Audio && sm2.hasHTML5) {\n        canIgnoreFlash = true;\n\n        for (item in formats) {\n          if (formats.hasOwnProperty(item)) {\n            if (formats[item].required) {\n              if (!sm2.html5.canPlayType(formats[item].type)) {\n                canIgnoreFlash = false;\n                flashNeeded = true;\n              } else if (sm2.preferFlash && (sm2.flash[item] || sm2.flash[formats[item].type])) {\n                flashNeeded = true;\n              }\n            }\n          }\n        }\n      }\n\n      if (sm2.ignoreFlash) {\n        flashNeeded = false;\n        canIgnoreFlash = true;\n      }\n\n      sm2.html5Only = sm2.hasHTML5 && sm2.useHTML5Audio && !flashNeeded;\n      return !sm2.html5Only;\n    };\n\n    parseURL = function parseURL(url) {\n      var i,\n          j,\n          urlResult = 0,\n          result;\n\n      if (url instanceof Array) {\n        for (i = 0, j = url.length; i < j; i++) {\n          if (url[i] instanceof Object) {\n            if (sm2.canPlayMIME(url[i].type)) {\n              urlResult = i;\n              break;\n            }\n          } else if (sm2.canPlayURL(url[i])) {\n            urlResult = i;\n            break;\n          }\n        }\n\n        if (url[urlResult].url) {\n          url[urlResult] = url[urlResult].url;\n        }\n\n        result = url[urlResult];\n      } else {\n        result = url;\n      }\n\n      return result;\n    };\n\n    startTimer = function startTimer(oSound) {\n      if (!oSound._hasTimer) {\n        oSound._hasTimer = true;\n\n        if (!mobileHTML5 && sm2.html5PollingInterval) {\n          if (h5IntervalTimer === null && h5TimerCount === 0) {\n            h5IntervalTimer = setInterval(timerExecute, sm2.html5PollingInterval);\n          }\n\n          h5TimerCount++;\n        }\n      }\n    };\n\n    stopTimer = function stopTimer(oSound) {\n      if (oSound._hasTimer) {\n        oSound._hasTimer = false;\n\n        if (!mobileHTML5 && sm2.html5PollingInterval) {\n          h5TimerCount--;\n        }\n      }\n    };\n\n    timerExecute = function timerExecute() {\n      var i;\n\n      if (h5IntervalTimer !== null && !h5TimerCount) {\n        clearInterval(h5IntervalTimer);\n        h5IntervalTimer = null;\n        return;\n      }\n\n      for (i = sm2.soundIDs.length - 1; i >= 0; i--) {\n        if (sm2.sounds[sm2.soundIDs[i]].isHTML5 && sm2.sounds[sm2.soundIDs[i]]._hasTimer) {\n          sm2.sounds[sm2.soundIDs[i]]._onTimer();\n        }\n      }\n    };\n\n    catchError = function catchError(options) {\n      options = options !== _undefined ? options : {};\n\n      if (typeof sm2.onerror === 'function') {\n        sm2.onerror.apply(window, [{\n          type: options.type !== _undefined ? options.type : null\n        }]);\n      }\n\n      if (options.fatal !== _undefined && options.fatal) {\n        sm2.disable();\n      }\n    };\n\n    badSafariFix = function badSafariFix() {\n      if (!isBadSafari || !detectFlash()) {\n        return;\n      }\n\n      var aF = sm2.audioFormats,\n          i,\n          item;\n\n      for (item in aF) {\n        if (aF.hasOwnProperty(item)) {\n          if (item === 'mp3' || item === 'mp4') {\n            sm2.html5[item] = false;\n\n            if (aF[item] && aF[item].related) {\n              for (i = aF[item].related.length - 1; i >= 0; i--) {\n                sm2.html5[aF[item].related[i]] = false;\n              }\n            }\n          }\n        }\n      }\n    };\n\n    this._setSandboxType = function (sandboxType) {};\n\n    this._externalInterfaceOK = function (swfVersion) {\n      if (sm2.swfLoaded) {\n        return;\n      }\n\n      var e;\n      sm2.swfLoaded = true;\n      tryInitOnFocus = false;\n\n      if (isBadSafari) {\n        badSafariFix();\n      }\n\n      setTimeout(init, isIE ? 100 : 1);\n    };\n\n    createMovie = function createMovie(movieID, movieURL) {\n      if (didAppend && appendSuccess) return false;\n\n      function initMsg() {}\n\n      if (sm2.html5Only) {\n        setVersionInfo();\n        initMsg();\n        sm2.oMC = id(sm2.movieID);\n        init();\n        didAppend = true;\n        appendSuccess = true;\n        return false;\n      }\n\n      var remoteURL = movieURL || sm2.url,\n          localURL = sm2.altURL || remoteURL,\n          swfTitle = 'JS/Flash audio component (SoundManager 2)',\n          oTarget = getDocument(),\n          extraClass = getSWFCSS(),\n          isRTL = null,\n          html = doc.getElementsByTagName('html')[0],\n          oEmbed,\n          oMovie,\n          tmp,\n          movieHTML,\n          oEl,\n          s,\n          x,\n          sClass;\n      isRTL = html && html.dir && html.dir.match(/rtl/i);\n      movieID = movieID === _undefined ? sm2.id : movieID;\n\n      function param(name, value) {\n        return '<param name=\"' + name + '\" value=\"' + value + '\" />';\n      }\n\n      setVersionInfo();\n      sm2.url = normalizeMovieURL(overHTTP ? remoteURL : localURL);\n      movieURL = sm2.url;\n      sm2.wmode = !sm2.wmode && sm2.useHighPerformance ? 'transparent' : sm2.wmode;\n\n      if (sm2.wmode !== null && (ua.match(/msie 8/i) || !isIE && !sm2.useHighPerformance) && navigator.platform.match(/win32|win64/i)) {\n        messages.push(strings.spcWmode);\n        sm2.wmode = null;\n      }\n\n      oEmbed = {\n        name: movieID,\n        id: movieID,\n        src: movieURL,\n        quality: 'high',\n        allowScriptAccess: sm2.allowScriptAccess,\n        bgcolor: sm2.bgColor,\n        pluginspage: http + 'www.macromedia.com/go/getflashplayer',\n        title: swfTitle,\n        type: 'application/x-shockwave-flash',\n        wmode: sm2.wmode,\n        hasPriority: 'true'\n      };\n\n      if (sm2.debugFlash) {\n        oEmbed.FlashVars = 'debug=1';\n      }\n\n      if (!sm2.wmode) {\n        delete oEmbed.wmode;\n      }\n\n      if (isIE) {\n        oMovie = doc.createElement('div');\n        movieHTML = ['<object id=\"' + movieID + '\" data=\"' + movieURL + '\" type=\"' + oEmbed.type + '\" title=\"' + oEmbed.title + '\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" codebase=\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0\">', param('movie', movieURL), param('AllowScriptAccess', sm2.allowScriptAccess), param('quality', oEmbed.quality), sm2.wmode ? param('wmode', sm2.wmode) : '', param('bgcolor', sm2.bgColor), param('hasPriority', 'true'), sm2.debugFlash ? param('FlashVars', oEmbed.FlashVars) : '', '</object>'].join('');\n      } else {\n        oMovie = doc.createElement('embed');\n\n        for (tmp in oEmbed) {\n          if (oEmbed.hasOwnProperty(tmp)) {\n            oMovie.setAttribute(tmp, oEmbed[tmp]);\n          }\n        }\n      }\n\n      initDebug();\n      extraClass = getSWFCSS();\n      oTarget = getDocument();\n\n      if (oTarget) {\n        sm2.oMC = id(sm2.movieID) || doc.createElement('div');\n\n        if (!sm2.oMC.id) {\n          sm2.oMC.id = sm2.movieID;\n          sm2.oMC.className = swfCSS.swfDefault + ' ' + extraClass;\n          s = null;\n          oEl = null;\n\n          if (!sm2.useFlashBlock) {\n            if (sm2.useHighPerformance) {\n              s = {\n                position: 'fixed',\n                width: '8px',\n                height: '8px',\n                bottom: '0px',\n                left: '0px',\n                overflow: 'hidden'\n              };\n            } else {\n              s = {\n                position: 'absolute',\n                width: '6px',\n                height: '6px',\n                top: '-9999px',\n                left: '-9999px'\n              };\n\n              if (isRTL) {\n                s.left = Math.abs(parseInt(s.left, 10)) + 'px';\n              }\n            }\n          }\n\n          if (isWebkit) {\n            sm2.oMC.style.zIndex = 10000;\n          }\n\n          if (!sm2.debugFlash) {\n            for (x in s) {\n              if (s.hasOwnProperty(x)) {\n                sm2.oMC.style[x] = s[x];\n              }\n            }\n          }\n\n          try {\n            if (!isIE) {\n              sm2.oMC.appendChild(oMovie);\n            }\n\n            oTarget.appendChild(sm2.oMC);\n\n            if (isIE) {\n              oEl = sm2.oMC.appendChild(doc.createElement('div'));\n              oEl.className = swfCSS.swfBox;\n              oEl.innerHTML = movieHTML;\n            }\n\n            appendSuccess = true;\n          } catch (e) {\n            throw new Error(str('domError') + ' \\n' + e.toString());\n          }\n        } else {\n          sClass = sm2.oMC.className;\n          sm2.oMC.className = (sClass ? sClass + ' ' : swfCSS.swfDefault) + (extraClass ? ' ' + extraClass : '');\n          sm2.oMC.appendChild(oMovie);\n\n          if (isIE) {\n            oEl = sm2.oMC.appendChild(doc.createElement('div'));\n            oEl.className = swfCSS.swfBox;\n            oEl.innerHTML = movieHTML;\n          }\n\n          appendSuccess = true;\n        }\n      }\n\n      didAppend = true;\n      initMsg();\n      return true;\n    };\n\n    initMovie = function initMovie() {\n      if (sm2.html5Only) {\n        createMovie();\n        return false;\n      }\n\n      if (flash) return false;\n\n      if (!sm2.url) {\n        return false;\n      }\n\n      flash = sm2.getMovie(sm2.id);\n\n      if (!flash) {\n        if (!oRemoved) {\n          createMovie(sm2.id, sm2.url);\n        } else {\n          if (!isIE) {\n            sm2.oMC.appendChild(oRemoved);\n          } else {\n            sm2.oMC.innerHTML = oRemovedHTML;\n          }\n\n          oRemoved = null;\n          didAppend = true;\n        }\n\n        flash = sm2.getMovie(sm2.id);\n      }\n\n      if (typeof sm2.oninitmovie === 'function') {\n        setTimeout(sm2.oninitmovie, 1);\n      }\n\n      return true;\n    };\n\n    delayWaitForEI = function delayWaitForEI() {\n      setTimeout(waitForEI, 1000);\n    };\n\n    rebootIntoHTML5 = function rebootIntoHTML5() {\n      window.setTimeout(function () {\n        sm2.setup({\n          preferFlash: false\n        }).reboot();\n        sm2.didFlashBlock = true;\n        sm2.beginDelayedInit();\n      }, 1);\n    };\n\n    waitForEI = function waitForEI() {\n      var p,\n          loadIncomplete = false;\n\n      if (!sm2.url) {\n        return;\n      }\n\n      if (waitingForEI) {\n        return;\n      }\n\n      waitingForEI = true;\n      event.remove(window, 'load', delayWaitForEI);\n\n      if (hasFlash && tryInitOnFocus && !isFocused) {\n        return;\n      }\n\n      if (!didInit) {\n        p = sm2.getMoviePercent();\n\n        if (p > 0 && p < 100) {\n          loadIncomplete = true;\n        }\n      }\n\n      setTimeout(function () {\n        p = sm2.getMoviePercent();\n\n        if (loadIncomplete) {\n          waitingForEI = false;\n          window.setTimeout(delayWaitForEI, 1);\n          return;\n        }\n\n        if (!didInit && okToDisable) {\n          if (p === null) {\n            if (sm2.useFlashBlock || sm2.flashLoadTimeout === 0) {\n              if (sm2.useFlashBlock) {\n                flashBlockHandler();\n              }\n            } else if (!sm2.useFlashBlock && canIgnoreFlash) {\n              rebootIntoHTML5();\n            } else {\n              processOnEvents({\n                type: 'ontimeout',\n                ignoreInit: true,\n                error: {\n                  type: 'INIT_FLASHBLOCK'\n                }\n              });\n            }\n          } else if (sm2.flashLoadTimeout === 0) {} else if (!sm2.useFlashBlock && canIgnoreFlash) {\n            rebootIntoHTML5();\n          } else {\n            failSafely(true);\n          }\n        }\n      }, sm2.flashLoadTimeout);\n    };\n\n    _handleFocus = function handleFocus() {\n      function cleanup() {\n        event.remove(window, 'focus', _handleFocus);\n      }\n\n      if (isFocused || !tryInitOnFocus) {\n        cleanup();\n        return true;\n      }\n\n      okToDisable = true;\n      isFocused = true;\n      waitingForEI = false;\n      delayWaitForEI();\n      cleanup();\n      return true;\n    };\n\n    flushMessages = function flushMessages() {};\n\n    showSupport = function showSupport() {};\n\n    initComplete = function initComplete(bNoDisable) {\n      if (didInit) return false;\n\n      if (sm2.html5Only) {\n        didInit = true;\n\n        _initUserOnload();\n\n        return true;\n      }\n\n      var wasTimeout = sm2.useFlashBlock && sm2.flashLoadTimeout && !sm2.getMoviePercent(),\n          result = true,\n          error;\n\n      if (!wasTimeout) {\n        didInit = true;\n      }\n\n      error = {\n        type: !hasFlash && needsFlash ? 'NO_FLASH' : 'INIT_TIMEOUT'\n      };\n\n      if (disabled || bNoDisable) {\n        if (sm2.useFlashBlock && sm2.oMC) {\n          sm2.oMC.className = getSWFCSS() + ' ' + (sm2.getMoviePercent() === null ? swfCSS.swfTimedout : swfCSS.swfError);\n        }\n\n        processOnEvents({\n          type: 'ontimeout',\n          error: error,\n          ignoreInit: true\n        });\n        catchError(error);\n        result = false;\n      } else {}\n\n      if (!disabled) {\n        if (sm2.waitForWindowLoad && !windowLoaded) {\n          event.add(window, 'load', _initUserOnload);\n        } else {\n          _initUserOnload();\n        }\n      }\n\n      return result;\n    };\n\n    setProperties = function setProperties() {\n      var i,\n          o = sm2.setupOptions;\n\n      for (i in o) {\n        if (o.hasOwnProperty(i)) {\n          if (sm2[i] === _undefined) {\n            sm2[i] = o[i];\n          } else if (sm2[i] !== o[i]) {\n            sm2.setupOptions[i] = sm2[i];\n          }\n        }\n      }\n    };\n\n    init = function init() {\n      if (didInit) {\n        return false;\n      }\n\n      function cleanup() {\n        event.remove(window, 'load', sm2.beginDelayedInit);\n      }\n\n      if (sm2.html5Only) {\n        if (!didInit) {\n          cleanup();\n          sm2.enabled = true;\n          initComplete();\n        }\n\n        return true;\n      }\n\n      initMovie();\n\n      try {\n        flash._externalInterfaceTest(false);\n\n        setPolling(true, sm2.flashPollingInterval || (sm2.useHighPerformance ? 10 : 50));\n\n        if (!sm2.debugMode) {\n          flash._disableDebug();\n        }\n\n        sm2.enabled = true;\n\n        if (!sm2.html5Only) {\n          event.add(window, 'unload', doNothing);\n        }\n      } catch (e) {\n        catchError({\n          type: 'JS_TO_FLASH_EXCEPTION',\n          fatal: true\n        });\n        failSafely(true);\n        initComplete();\n        return false;\n      }\n\n      initComplete();\n      cleanup();\n      return true;\n    };\n\n    _domContentLoaded = function domContentLoaded() {\n      if (didDCLoaded) return false;\n      didDCLoaded = true;\n      setProperties();\n      initDebug();\n\n      if (!hasFlash && sm2.hasHTML5) {\n        sm2.setup({\n          useHTML5Audio: true,\n          preferFlash: false\n        });\n      }\n\n      testHTML5();\n\n      if (!hasFlash && needsFlash) {\n        messages.push(strings.needFlash);\n        sm2.setup({\n          flashLoadTimeout: 1\n        });\n      }\n\n      if (doc.removeEventListener) {\n        doc.removeEventListener('DOMContentLoaded', _domContentLoaded, false);\n      }\n\n      initMovie();\n      return true;\n    };\n\n    _domContentLoadedIE = function domContentLoadedIE() {\n      if (doc.readyState === 'complete') {\n        _domContentLoaded();\n\n        doc.detachEvent('onreadystatechange', _domContentLoadedIE);\n      }\n\n      return true;\n    };\n\n    _winOnLoad = function winOnLoad() {\n      windowLoaded = true;\n\n      _domContentLoaded();\n\n      event.remove(window, 'load', _winOnLoad);\n    };\n\n    detectFlash();\n    event.add(window, 'focus', _handleFocus);\n    event.add(window, 'load', delayWaitForEI);\n    event.add(window, 'load', _winOnLoad);\n\n    if (doc.addEventListener) {\n      doc.addEventListener('DOMContentLoaded', _domContentLoaded, false);\n    } else if (doc.attachEvent) {\n      doc.attachEvent('onreadystatechange', _domContentLoadedIE);\n    } else {\n      catchError({\n        type: 'NO_DOM2_EVENTS',\n        fatal: true\n      });\n    }\n  } // SM2_DEFER details: http://www.schillmania.com/projects/soundmanager2/doc/getstarted/#lazy-loading\n\n\n  if (window.SM2_DEFER === _undefined || !SM2_DEFER) {\n    soundManager = new SoundManager();\n  }\n\n  if (typeof module === 'object' && module && typeof module.exports === 'object') {\n    module.exports.SoundManager = SoundManager;\n    module.exports.soundManager = soundManager;\n  } else if (typeof define === 'function' && define.amd) {\n    define(function () {\n      function getInstance(smBuilder) {\n        if (!window.soundManager && smBuilder instanceof Function) {\n          var instance = smBuilder(SoundManager);\n\n          if (instance instanceof SoundManager) {\n            window.soundManager = instance;\n          }\n        }\n\n        return window.soundManager;\n      }\n\n      return {\n        constructor: SoundManager,\n        getInstance: getInstance\n      };\n    });\n  } // standard browser case\n  // constructor\n\n\n  window.SoundManager = SoundManager; // public API, flash callbacks etc.\n\n  window.soundManager = soundManager;\n})(window);","map":null,"metadata":{},"sourceType":"script"}